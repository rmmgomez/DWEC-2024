{
  "version": 3,
  "sources": ["../../@geoapify/geocoder-autocomplete/src/autocomplete.ts"],
  "sourcesContent": ["\nimport countiesData from \"./countries.json\";\n\nexport class GeocoderAutocomplete {\n\n    private inputElement: HTMLInputElement;\n    private inputClearButton: HTMLElement;\n    private autocompleteItemsElement: HTMLElement = null;\n\n    /* Focused item in the autocomplete list. This variable is used to navigate with buttons */\n    private focusedItemIndex: number;\n\n    /* Current autocomplete items data (GeoJSON.Feature) */\n    private currentItems: any;\n\n    /* Active request promise reject function. To be able to cancel the promise when a new request comes */\n    private currentPromiseReject: any;\n\n    /* Active place details request promise reject function */\n    private currentPlaceDetailsPromiseReject: any;\n\n    /* We set timeout before sending a request to avoid unnecessary calls */\n    private currentTimeout: number;\n\n    private changeCallbacks: ((selectedOption: any) => void)[] = [];\n    private suggestionsChangeCallbacks: ((options: any[]) => void)[] = [];\n    private inputCallbacks: ((input: string) => void)[] = [];\n    private openCallbacks: ((opened: boolean) => void)[] = [];\n    private closeCallbacks: ((opened: boolean) => void)[] = [];\n\n    private preprocessHook?: (value: string) => string;\n    private postprocessHook?: (feature: any) => string;\n    private suggestionsFilter?: (suggetions: any[]) => any[];\n\n    private sendGeocoderRequestAlt?: (value: string, geocoderAutocomplete: GeocoderAutocomplete) => Promise<any>;\n    private sendPlaceDetailsRequestAlt?: (feature: any, geocoderAutocomplete: GeocoderAutocomplete) => Promise<any>;\n\n    private geocoderUrl = \"https://api.geoapify.com/v1/geocode/autocomplete\";\n    private placeDetailsUrl = \"https://api.geoapify.com/v2/place-details\";\n\n    private options: GeocoderAutocompleteOptions = {\n        limit: 5,\n        debounceDelay: 100\n    };\n\n    private BY_COUNTRYCODE = 'countrycode';\n    private BY_RECT = 'rect';\n    private BY_CIRCLE = 'circle';\n    private BY_PROXIMITY = 'proximity';\n    private BY_PLACE = 'place';\n\n    constructor(private container: HTMLElement, private apiKey: string, options?: GeocoderAutocompleteOptions) {\n        this.options = options ? { ...this.options, ...options } : this.options;\n        this.options.filter = this.options.filter || {};\n        this.options.bias = this.options.bias || {};\n\n        if (this.options.countryCodes) {\n            this.addFilterByCountry(this.options.countryCodes);\n        }\n\n        if (this.options.position) {\n            this.addBiasByProximity(this.options.position);\n        }\n\n        // create input element\n        this.inputElement = document.createElement(\"input\");\n        this.inputElement.classList.add(\"geoapify-autocomplete-input\");\n        this.inputElement.setAttribute(\"type\", \"text\");\n        this.inputElement.setAttribute(\"placeholder\", this.options.placeholder || \"Enter an address here\");\n        this.container.appendChild(this.inputElement);\n\n        // add clear button to input element\n        this.inputClearButton = document.createElement(\"div\");\n        this.inputClearButton.classList.add(\"geoapify-close-button\");\n        this.addIcon(this.inputClearButton, 'close');\n        this.inputClearButton.addEventListener(\"click\", this.clearFieldAndNotify.bind(this), false);\n\n        this.container.appendChild(this.inputClearButton);\n\n        this.inputElement.addEventListener('input', this.onUserInput.bind(this), false);\n        this.inputElement.addEventListener('keydown', this.onUserKeyPress.bind(this), false);\n\n        document.addEventListener(\"click\", (event) => {\n            if (event.target !== this.inputElement) {\n                this.closeDropDownList();\n            } else if (!this.autocompleteItemsElement) {\n                // open dropdown list again\n                this.openDropdownAgain();\n            }\n        });\n    }\n\n    public setType(type: 'country' | 'state' | 'city' | 'postcode' | 'street' | 'amenity') {\n        this.options.type = type;\n    }\n\n    public setLang(lang: SupportedLanguage) {\n        this.options.lang = lang;\n    }\n\n    public setCountryCodes(codes: CountyCode[]) {\n        console.warn(\"WARNING! Obsolete function called. Function setCountryCodes() has been deprecated, please use the new addFilterByCountry() function instead!\");\n        this.options.countryCodes = codes;\n    }\n\n    public setPosition(position: GeoPosition) {\n        console.warn(\"WARNING! Obsolete function called. Function setPosition() has been deprecated, please use the new addBiasByProximity() function instead!\");\n        this.options.position = position;\n    }\n\n    public setLimit(limit: number) {\n        this.options.limit = limit;\n    }\n\n    public setValue(value: string) {\n        if (!value) {\n            this.inputClearButton.classList.remove(\"visible\");\n        } else {\n            this.inputClearButton.classList.add(\"visible\");\n        }\n\n        this.inputElement.value = value;\n    }\n\n    public getValue() {\n        return this.inputElement.value;\n    }\n\n    public addFilterByCountry(codes: ByCountryCodeOptions) {\n        this.options.filter[this.BY_COUNTRYCODE] = codes;\n    }\n\n    public addFilterByCircle(filterByCircle: ByCircleOptions) {\n        this.options.filter[this.BY_CIRCLE] = filterByCircle;\n    }\n\n    public addFilterByRect(filterByRect: ByRectOptions) {\n        this.options.filter[this.BY_RECT] = filterByRect;\n    }\n\n    public addFilterByPlace(filterByPlace: string) {\n        this.options.filter[this.BY_PLACE] = filterByPlace;\n    }\n\n    public clearFilters() {\n        this.options.filter = {};\n    }\n\n    public addBiasByCountry(codes: ByCountryCodeOptions) {\n        this.options.bias[this.BY_COUNTRYCODE] = codes;\n    }\n\n    public addBiasByCircle(biasByCircle: ByCircleOptions) {\n        this.options.bias[this.BY_CIRCLE] = biasByCircle;\n    }\n\n    public addBiasByRect(biasByRect: ByRectOptions) {\n        this.options.bias[this.BY_RECT] = biasByRect;\n    }\n\n    public addBiasByProximity(biasByProximity: ByProximityOptions) {\n        this.options.bias[this.BY_PROXIMITY] = biasByProximity;\n    }\n\n    public clearBias() {\n        this.options.bias = {};\n    }\n\n    public on(operation: 'select' | 'suggestions' | 'input' | 'close' | 'open', callback: (param: any) => void) {\n        if (operation === 'select' && this.changeCallbacks.indexOf(callback) < 0) {\n            this.changeCallbacks.push(callback);\n        }\n\n        if (operation === 'suggestions' && this.suggestionsChangeCallbacks.indexOf(callback) < 0) {\n            this.suggestionsChangeCallbacks.push(callback);\n        }\n\n        if (operation === 'input' && this.inputCallbacks.indexOf(callback) < 0) {\n            this.inputCallbacks.push(callback);\n        }\n\n        if (operation === 'close' && this.closeCallbacks.indexOf(callback) < 0) {\n            this.closeCallbacks.push(callback);\n        }\n\n        if (operation === 'open' && this.openCallbacks.indexOf(callback) < 0) {\n            this.openCallbacks.push(callback);\n        }\n    }\n\n    public off(operation: 'select' | 'suggestions' | 'input' | 'close' | 'open', callback?: (param: any) => any) {\n        if (operation === 'select' && this.changeCallbacks.indexOf(callback) >= 0) {\n            this.changeCallbacks.splice(this.changeCallbacks.indexOf(callback), 1);\n        } else if (operation === 'select' && !callback) {\n            this.changeCallbacks = [];\n        }\n\n        if (operation === 'suggestions' && this.suggestionsChangeCallbacks.indexOf(callback) >= 0) {\n            this.suggestionsChangeCallbacks.splice(this.suggestionsChangeCallbacks.indexOf(callback), 1);\n        } else if (operation === 'suggestions' && !callback) {\n            this.suggestionsChangeCallbacks = [];\n        }\n\n        if (operation === 'input' && this.inputCallbacks.indexOf(callback) >= 0) {\n            this.inputCallbacks.splice(this.inputCallbacks.indexOf(callback), 1);\n        } else if (operation === 'input' && !callback) {\n            this.inputCallbacks = [];\n        }\n\n        if (operation === 'close' && this.closeCallbacks.indexOf(callback) >= 0) {\n            this.closeCallbacks.splice(this.closeCallbacks.indexOf(callback), 1);\n        } else if (operation === 'close' && !callback) {\n            this.closeCallbacks = [];\n        }\n\n        if (operation === 'open' && this.openCallbacks.indexOf(callback) >= 0) {\n            this.openCallbacks.splice(this.openCallbacks.indexOf(callback), 1);\n        } else if (operation === 'open' && !callback) {\n            this.openCallbacks = [];\n        }\n    }\n\n    public once(operation: 'select' | 'suggestions' | 'input' | 'close' | 'open', callback: (param: any) => any) {\n        this.on(operation, callback);\n\n        const current = this;\n        const currentListener = () => {\n            current.off(operation, callback);\n            current.off(operation, currentListener);\n        }\n\n        this.on(operation, currentListener);\n    }\n\n    public setSuggestionsFilter(suggestionsFilterFunc?: (suggestions: any[]) => any[]) {\n        if (suggestionsFilterFunc && typeof suggestionsFilterFunc === 'function') {\n            this.suggestionsFilter = suggestionsFilterFunc;\n        } else {\n            this.suggestionsFilter = null;\n        }\n    }\n\n    public setPreprocessHook(preprocessHookFunc?: (value: string) => string) {\n        if (preprocessHookFunc && typeof preprocessHookFunc === 'function') {\n            this.preprocessHook = preprocessHookFunc;\n        } else {\n            this.preprocessHook = null;\n        }\n    }\n\n    public setPostprocessHook(postprocessHookFunc?: (value: string) => string) {\n        if (postprocessHookFunc && typeof postprocessHookFunc === 'function') {\n            this.postprocessHook = postprocessHookFunc;\n        } else {\n            this.postprocessHook = null;\n        }\n    }\n\n    public setSendGeocoderRequestFunc(sendGeocoderRequestFunc: (value: string, geocoderAutocomplete: GeocoderAutocomplete) => Promise<any>) {\n        if (sendGeocoderRequestFunc && typeof sendGeocoderRequestFunc === 'function') {\n            this.sendGeocoderRequestAlt = sendGeocoderRequestFunc;\n        } else {\n            this.sendGeocoderRequestAlt = null;\n        }\n    }\n\n    public setSendPlaceDetailsRequestFunc(sendPlaceDetailsRequestFunc: (feature: any, geocoderAutocomplete: GeocoderAutocomplete) => Promise<any>) {\n        if (sendPlaceDetailsRequestFunc && typeof sendPlaceDetailsRequestFunc === 'function') {\n            this.sendPlaceDetailsRequestAlt = sendPlaceDetailsRequestFunc;\n        } else {\n            this.sendPlaceDetailsRequestAlt = null;\n        }\n    }\n\n    public isOpen(): boolean {\n        return !!this.autocompleteItemsElement;\n    }\n\n    public close() {\n        this.closeDropDownList();\n    }\n\n    public open() {\n        if (!this.isOpen()) {\n            this.openDropdownAgain();\n        }\n    }\n\n    public sendGeocoderRequest(value: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.currentPromiseReject = reject;\n\n            let url = this.generateUrl(value);\n\n            fetch(url)\n                .then((response) => {\n                    if (response.ok) {\n                        response.json().then(data => resolve(data));\n                    } else {\n                        response.json().then(data => reject(data));\n                    }\n                });\n        });\n    }\n\n    public sendPlaceDetailsRequest(feature: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n\n            if (feature.properties.datasource?.sourcename !== 'openstreetmap' || !feature.properties.place_id) {\n                // only OSM data has detailed information; return the original object if the source is different from OSM\n                resolve(feature);\n                return;\n            }\n            \n            this.currentPlaceDetailsPromiseReject = reject;\n            let url = this.generatePlacesUrlUrl(feature.properties.place_id);\n\n            fetch(url)\n                .then((response) => {\n                    if (response.ok) {\n                        response.json().then(data => {\n                            if (!data.features.length) {\n                                resolve(feature);\n                            }\n\n                            resolve(data.features[0]);\n                        });\n                    } else {\n                        response.json().then(data => reject(data));\n                    }\n                });\n        });\n    }\n\n    /* Execute a function when someone writes in the text field: */\n    onUserInput(event: Event) {\n        let currentValue = this.inputElement.value;\n        let userEnteredValue = this.inputElement.value;\n\n        this.inputCallbacks.forEach(callback => callback(currentValue));\n\n        /* Close any already open dropdown list */\n        this.closeDropDownList();\n\n        this.focusedItemIndex = -1;\n\n        // Cancel previous request\n        if (this.currentPromiseReject) {\n            this.currentPromiseReject({\n                canceled: true\n            });\n            this.currentPromiseReject = null;\n        }\n\n        // Cancel previous timeout\n        if (this.currentTimeout) {\n            window.clearTimeout(this.currentTimeout);\n            this.currentTimeout = null;\n        }\n\n        if (!currentValue) {\n            this.inputClearButton.classList.remove(\"visible\");\n            return false;\n        }\n\n        // Show clearButton when there is a text\n        this.inputClearButton.classList.add(\"visible\");\n\n\n        this.currentTimeout = window.setTimeout(() => {\n            /* Create a new promise and send geocoding request */\n            if (this.preprocessHook && typeof this.preprocessHook === 'function') {\n                currentValue = this.preprocessHook(currentValue);\n            }\n\n            let promise;\n\n            if (this.sendGeocoderRequestAlt) {\n                promise = this.sendGeocoderRequestAlt(currentValue, this);\n            } else {\n                promise = this.sendGeocoderRequest(currentValue);\n            }\n\n            promise.then((data: any) => {\n\n                if (data.features && data.features.length &&\n                    data?.query?.parsed &&\n                    (this.options.allowNonVerifiedHouseNumber || this.options.allowNonVerifiedStreet)) {\n\n                    this.extendByNonVerifiedValues(data.features, data?.query?.parsed);\n                }\n\n                this.currentItems = data.features;\n\n                if (this.currentItems && this.currentItems.length && this.suggestionsFilter && typeof this.suggestionsFilter === 'function') {\n                    this.currentItems = this.suggestionsFilter(this.currentItems);\n                }\n\n                this.notifySuggestions(this.currentItems);\n\n                if (!this.currentItems.length) {\n                    return;\n                }\n\n                /*create a DIV element that will contain the items (values):*/\n                this.autocompleteItemsElement = document.createElement(\"div\");\n                this.autocompleteItemsElement.setAttribute(\"class\", \"geoapify-autocomplete-items\");\n\n                this.notifyOpened();\n\n                /* Append the DIV element as a child of the autocomplete container:*/\n                this.container.appendChild(this.autocompleteItemsElement);\n                /* For each item in the results */\n                this.currentItems.forEach((feature: any, index: number) => {\n                    /* Create a DIV element for each element: */\n                    const itemElement = document.createElement(\"div\");\n                    itemElement.classList.add('geoapify-autocomplete-item');\n\n\n                    if (!this.options.skipIcons) {\n                        const iconElement = document.createElement(\"span\");\n                        iconElement.classList.add('icon');\n\n                        this.addFeatureIcon(iconElement, feature.properties.result_type, feature.properties.country_code);\n\n                        itemElement.appendChild(iconElement);\n                    }\n\n                    const textElement = document.createElement(\"span\");\n                    textElement.classList.add('address');\n\n                    if (this.postprocessHook && typeof this.postprocessHook === 'function') {\n                        const value = this.postprocessHook(feature);\n                        textElement.innerHTML = this.getStyledAddressSingleValue(value, userEnteredValue);\n                    } else {\n                        textElement.innerHTML = this.getStyledAddress(feature.properties, userEnteredValue);\n                    }\n\n                    itemElement.appendChild(textElement);\n\n                    itemElement.addEventListener(\"click\", (e) => {\n                        event.stopPropagation();\n                        this.setValueAndNotify(this.currentItems[index])\n                    });\n                    this.autocompleteItemsElement.appendChild(itemElement);\n                });\n            }, (err) => {\n                if (!err.canceled) {\n                    console.log(err);\n                }\n            });\n        }, this.options.debounceDelay);\n    }\n\n    private addHouseNumberToFormatted(featureProperties: any, street: string, housenumber: string) {\n        const houseNumberAndStreetFormatsPerCountry: { [key: string]: string[] } = {\n            \"{{{road}}} {{{house_number}}}\": [\"af\", \"ai\", \"al\", \"ao\", \"ar\", \"at\", \"aw\", \"ax\", \"ba\", \"be\", \"bg\", \"bi\", \"bo\", \"bq\", \"br\", \"bs\", \"bt\", \"bv\", \"bw\", \"cf\", \"ch\", \"cl\", \"cm\", \"co\", \"cr\", \"cu\", \"cv\", \"cw\", \"cy\", \"cz\", \"de\", \"dk\", \"do\", \"ec\", \"ee\", \"eh\", \"er\", \"et\", \"fi\", \"fo\", \"gd\", \"ge\", \"gl\", \"gq\", \"gr\", \"gt\", \"gw\", \"hn\", \"hr\", \"ht\", \"hu\", \"id\", \"il\", \"ir\", \"is\", \"jo\", \"ki\", \"km\", \"kp\", \"kw\", \"lc\", \"li\", \"lr\", \"lt\", \"lv\", \"ly\", \"me\", \"mk\", \"ml\", \"mn\", \"mo\", \"mx\", \"ni\", \"nl\", \"no\", \"np\", \"pa\", \"pe\", \"pl\", \"ps\", \"pt\", \"pw\", \"py\", \"qa\", \"ro\", \"rs\", \"ru\", \"sb\", \"sd\", \"se\", \"si\", \"sj\", \"sk\", \"so\", \"sr\", \"ss\", \"st\", \"sv\", \"sx\", \"sz\", \"td\", \"tj\", \"tl\", \"tr\", \"um\", \"uz\", \"uy\", \"vc\", \"ve\", \"vu\", \"ws\"],\n            \"{{{house_number}}} {{{road}}}\": [\"ad\", \"ae\", \"ag\", \"am\", \"as\", \"au\", \"az\", \"bb\", \"bd\", \"bf\", \"bh\", \"bl\", \"bm\", \"bz\", \"ca\", \"cc\", \"ci\", \"ck\", \"cn\", \"cx\", \"dj\", \"dm\", \"dz\", \"eg\", \"fj\", \"fk\", \"fm\", \"fr\", \"ga\", \"gb\", \"gf\", \"gg\", \"gh\", \"gi\", \"gm\", \"gn\", \"gp\", \"gs\", \"gu\", \"gy\", \"hk\", \"hm\", \"ie\", \"im\", \"io\", \"iq\", \"je\", \"jm\", \"jp\", \"ke\", \"kh\", \"kn\", \"kr\", \"ky\", \"lb\", \"lk\", \"ls\", \"lu\", \"ma\", \"mc\", \"mf\", \"mh\", \"mg\", \"mm\", \"mp\", \"ms\", \"mt\", \"mq\", \"mv\", \"mw\", \"my\", \"na\", \"nc\", \"ne\", \"nf\", \"ng\", \"nr\", \"nu\", \"nz\", \"om\", \"pf\", \"pg\", \"ph\", \"pk\", \"pm\", \"pr\", \"re\", \"rw\", \"sa\", \"sc\", \"sg\", \"sh\", \"sl\", \"sn\", \"tc\", \"tf\", \"th\", \"tk\", \"tn\", \"to\", \"tt\", \"tv\", \"tw\", \"tz\", \"ug\", \"us\", \"vg\", \"vi\", \"wf\", \"yt\", \"za\", \"zm\", \"zw\"],\n            \"{{{road}}}, {{{house_number}}}\": [\"by\", \"es\", \"it\", \"kg\", \"kz\", \"md\", \"mz\", \"sm\", \"sy\", \"ua\", \"va\"],\n            \"{{{house_number}}}, {{{road}}}\": [\"bj\", \"bn\", \"cd\", \"cg\", \"in\", \"la\", \"mr\", \"mu\", \"tg\", \"tm\", \"vn\", \"ye\"]\n        }\n\n        const format = Object.keys(houseNumberAndStreetFormatsPerCountry).find(key => houseNumberAndStreetFormatsPerCountry[key].indexOf(featureProperties.country_code) >= 0) || \"{{{road}}} {{{house_number}}}\";\n\n        if (street) {\n            // add street and housenumber\n            featureProperties.street = street.replace(/(^\\w|\\s\\w|[-]\\w)/g, m => m.toUpperCase());\n\n            featureProperties.housenumber = housenumber;\n            const addressPart = format.replace(\"{{{road}}}\", featureProperties.street).replace(\"{{{house_number}}}\", housenumber);\n            featureProperties.address_line1 = addressPart;\n            featureProperties.address_line2 = featureProperties.formatted;\n\n            featureProperties.formatted = addressPart + \", \" + featureProperties.formatted;\n        } else {\n            // add house number only\n            featureProperties.housenumber = housenumber;\n            const addressPart = format.replace(\"{{{road}}}\", featureProperties.street).replace(\"{{{house_number}}}\", housenumber);\n\n            featureProperties.address_line1 = featureProperties.address_line1.replace(featureProperties.street, addressPart);;\n            featureProperties.formatted = featureProperties.formatted.replace(featureProperties.street, addressPart);\n        }\n    }\n\n    private extendByNonVerifiedValues(features: any, parsedAddress: any) {\n        features.forEach((feature: any) => {\n            if (parsedAddress.housenumber &&\n                this.options.allowNonVerifiedHouseNumber && feature.properties.rank.match_type === \"match_by_street\") {\n                // add housenumber\n                this.addHouseNumberToFormatted(feature.properties, null, parsedAddress.housenumber)\n                feature.properties.nonVerifiedParts = [\"housenumber\"];\n            } else if (parsedAddress.street && parsedAddress.housenumber &&\n                this.options.allowNonVerifiedStreet &&\n                (feature.properties.rank.match_type === \"match_by_city_or_disrict\" || feature.properties.rank.match_type === \"match_by_postcode\")) {\n                // add housenumber and street\n                this.addHouseNumberToFormatted(feature.properties, parsedAddress.street, parsedAddress.housenumber)\n                feature.properties.nonVerifiedParts = [\"housenumber\", \"street\"];\n            } else if (parsedAddress.street &&\n                this.options.allowNonVerifiedStreet &&\n                (feature.properties.rank.match_type === \"match_by_city_or_disrict\" || feature.properties.rank.match_type === \"match_by_postcode\")) {\n                // add street\n                feature.properties.street = parsedAddress.street.replace(/(^\\w|\\s\\w|[-]\\w)/g, (m: string) => m.toUpperCase());\n\n                feature.properties.address_line1 = feature.properties.street;\n                feature.properties.address_line2 = feature.properties.formatted;\n\n                feature.properties.formatted = feature.properties.street + \", \" + feature.properties.formatted;\n                feature.properties.nonVerifiedParts = [\"street\"];\n            }\n        });\n    }\n\n    private getStyledAddressSingleValue(value: string, currentValue: string): string {\n        let displayValue = value;\n\n        const valueIndex = (displayValue || '').toLowerCase().indexOf(currentValue.toLowerCase());\n        if (valueIndex >= 0) {\n            displayValue = displayValue.substring(0, valueIndex) +\n                `<strong>${displayValue.substring(valueIndex, valueIndex + currentValue.length)}</strong>` +\n                displayValue.substring(valueIndex + currentValue.length);\n        }\n\n        return `<span class=\"main-part\">${displayValue}</span>`\n    }\n\n    private getStyledAddress(featureProperties: any, currentValue: string): string {\n        let mainPart: string;\n        let secondaryPart: string;\n        const parts = featureProperties.formatted.split(',').map((part: string) => part.trim());\n\n        if (featureProperties.name) {\n            mainPart = parts[0];\n            secondaryPart = parts.slice(1).join(', ');\n        } else {\n            const mainElements = Math.min(2, Math.max(parts.length - 2, 1));\n            mainPart = parts.slice(0, mainElements).join(', ');\n            secondaryPart = parts.slice(mainElements).join(', ');\n        }\n\n        if (featureProperties.nonVerifiedParts && featureProperties.nonVerifiedParts.length) {\n            featureProperties.nonVerifiedParts.forEach((part: string) => {\n                mainPart = mainPart.replace(featureProperties[part], `<span class=\"non-verified\">${featureProperties[part]}</span>`);\n            });\n        } else {\n            const valueIndex = mainPart.toLowerCase().indexOf(currentValue.toLowerCase());\n            if (valueIndex >= 0) {\n                mainPart = mainPart.substring(0, valueIndex) +\n                    `<strong>${mainPart.substring(valueIndex, valueIndex + currentValue.length)}</strong>` +\n                    mainPart.substring(valueIndex + currentValue.length);\n\n            }\n        }\n\n        return `<span class=\"main-part\">${mainPart}</span><span class=\"secondary-part\">${secondaryPart}</span>`\n    }\n\n    private onUserKeyPress(event: KeyboardEvent) {\n        if (this.autocompleteItemsElement) {\n\n            const itemElements: HTMLCollectionOf<HTMLDivElement> = this.autocompleteItemsElement.getElementsByTagName(\"div\");\n            if (event.code === 'ArrowDown') {\n                event.preventDefault();\n\n                /*If the arrow DOWN key is pressed, increase the focusedItemIndex variable:*/\n                this.focusedItemIndex++;\n                if (this.focusedItemIndex >= itemElements.length) this.focusedItemIndex = 0;\n                /*and and make the current item more visible:*/\n                this.setActive(itemElements, this.focusedItemIndex);\n            } else if (event.code === 'ArrowUp') {\n                event.preventDefault();\n\n                /*If the arrow UP key is pressed, decrease the focusedItemIndex variable:*/\n                this.focusedItemIndex--;\n                if (this.focusedItemIndex < 0) this.focusedItemIndex = (itemElements.length - 1);\n                /*and and make the current item more visible:*/\n                this.setActive(itemElements, this.focusedItemIndex);\n            } else if (event.code === \"Enter\") {\n                /* If the ENTER key is pressed and value as selected, close the list*/\n                event.preventDefault();\n                if (this.focusedItemIndex > -1) {\n                    if (this.options.skipSelectionOnArrowKey) {\n                        // select the location if it wasn't selected by navigation\n                        this.setValueAndNotify(this.currentItems[this.focusedItemIndex]);\n                    } else {\n                        this.closeDropDownList();\n                    }\n                }\n            } else if (event.code === \"Escape\") {\n                /* If the ESC key is presses, close the list */\n                this.closeDropDownList();\n            }\n        } else {\n            if (event.code == 'ArrowDown') {\n                /* Open dropdown list again */\n                this.openDropdownAgain();\n            }\n        }\n    }\n\n    private setActive(items: HTMLCollectionOf<HTMLDivElement>, index: number) {\n        if (!items || !items.length) return false;\n\n        for (var i = 0; i < items.length; i++) {\n            items[i].classList.remove(\"active\");\n        }\n\n        /* Add class \"autocomplete-active\" to the active element*/\n        items[index].classList.add(\"active\");\n\n        if (!this.options.skipSelectionOnArrowKey) {\n            // Change input value and notify\n            if (this.postprocessHook && typeof this.postprocessHook === 'function') {\n                this.inputElement.value = this.postprocessHook(this.currentItems[index]);\n            } else {\n                this.inputElement.value = this.currentItems[index].properties.formatted;\n            }\n            this.notifyValueSelected(this.currentItems[index]);\n        }\n    }\n\n\n    private setValueAndNotify(feature: any) {\n        if (this.postprocessHook && typeof this.postprocessHook === 'function') {\n            this.inputElement.value = this.postprocessHook(feature);\n        } else {\n            this.inputElement.value = feature.properties.formatted;\n        }\n\n\n        this.notifyValueSelected(feature);\n\n        /* Close the list of autocompleted values: */\n        this.closeDropDownList();\n    }\n\n    private clearFieldAndNotify(event: MouseEvent) {\n        event.stopPropagation();\n        this.inputElement.value = '';\n        this.inputClearButton.classList.remove(\"visible\");\n\n        // Cancel previous request\n        if (this.currentPromiseReject) {\n            this.currentPromiseReject({\n                canceled: true\n            });\n            this.currentPromiseReject = null;\n        }\n\n        // Cancel previous timeout\n        if (this.currentTimeout) {\n            window.clearTimeout(this.currentTimeout);\n            this.currentTimeout = null;\n        }\n\n        this.closeDropDownList();\n\n        // notify here\n        this.notifyValueSelected(null);\n    }\n\n    private closeDropDownList() {\n        if (this.autocompleteItemsElement) {\n            this.container.removeChild(this.autocompleteItemsElement);\n            this.autocompleteItemsElement = null;\n            this.notifyClosed();\n        }\n    }\n\n    private addIcon(element: HTMLElement, icon: string) {\n\n        //FortAwesome icons 5. Licence - https://fontawesome.com/license/free\n\n        const icons: { [key: string]: any } = {\n            \"close\": {\n                path: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\",\n                viewbox: \"0 0 24 24\"\n            },\n            \"map-marker\": {\n                path: \"M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0zM192 272c44.183 0 80-35.817 80-80s-35.817-80-80-80-80 35.817-80 80 35.817 80 80 80z\",\n                viewbox: \"0 0 384 512\"\n            },\n            \"road\": {\n                path: \"M573.19 402.67l-139.79-320C428.43 71.29 417.6 64 405.68 64h-97.59l2.45 23.16c.5 4.72-3.21 8.84-7.96 8.84h-29.16c-4.75 0-8.46-4.12-7.96-8.84L267.91 64h-97.59c-11.93 0-22.76 7.29-27.73 18.67L2.8 402.67C-6.45 423.86 8.31 448 30.54 448h196.84l10.31-97.68c.86-8.14 7.72-14.32 15.91-14.32h68.8c8.19 0 15.05 6.18 15.91 14.32L348.62 448h196.84c22.23 0 36.99-24.14 27.73-45.33zM260.4 135.16a8 8 0 0 1 7.96-7.16h39.29c4.09 0 7.53 3.09 7.96 7.16l4.6 43.58c.75 7.09-4.81 13.26-11.93 13.26h-40.54c-7.13 0-12.68-6.17-11.93-13.26l4.59-43.58zM315.64 304h-55.29c-9.5 0-16.91-8.23-15.91-17.68l5.07-48c.86-8.14 7.72-14.32 15.91-14.32h45.15c8.19 0 15.05 6.18 15.91 14.32l5.07 48c1 9.45-6.41 17.68-15.91 17.68z\",\n                viewbox: \"0 0 576 512\"\n            },\n            \"city\": {\n                path: \"M616 192H480V24c0-13.26-10.74-24-24-24H312c-13.26 0-24 10.74-24 24v72h-64V16c0-8.84-7.16-16-16-16h-16c-8.84 0-16 7.16-16 16v80h-64V16c0-8.84-7.16-16-16-16H80c-8.84 0-16 7.16-16 16v80H24c-13.26 0-24 10.74-24 24v360c0 17.67 14.33 32 32 32h576c17.67 0 32-14.33 32-32V216c0-13.26-10.75-24-24-24zM128 404c0 6.63-5.37 12-12 12H76c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12H76c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12H76c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm128 192c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm160 96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12V76c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm160 288c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40z\",\n                viewbox: \"0 0 640 512\"\n            }\n        }\n\n        var svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", 'svg');\n        svgElement.setAttribute('viewBox', icons[icon].viewbox);\n        svgElement.setAttribute('height', \"24\");\n\n        var iconElement = document.createElementNS(\"http://www.w3.org/2000/svg\", 'path');\n        iconElement.setAttribute(\"d\", icons[icon].path);\n        iconElement.setAttribute('fill', 'currentColor');\n        svgElement.appendChild(iconElement);\n        element.appendChild(svgElement);\n    }\n\n    private addFeatureIcon(element: HTMLElement, type: string, countryCode: string) {\n        const iconMap: any = {\n            'unknown': 'map-marker',\n            'amenity': 'map-marker',\n            'building': 'map-marker',\n            'street': 'road',\n            'suburb': 'city',\n            'district': 'city',\n            'postcode': 'city',\n            'city': 'city',\n            'county': 'city',\n            'state': 'city'\n        };\n\n        const countryData = countiesData.find(county => countryCode && county.code.toLowerCase() === countryCode.toLowerCase());\n\n        if ((type === 'country') && countryData) {\n            element.classList.add(\"emoji\");;\n            const emojiElement = document.createElement('span');\n            emojiElement.innerText = countryData.emoji;\n            element.appendChild(emojiElement);\n        } else if (iconMap[type]) {\n            this.addIcon(element, iconMap[type])\n        } else {\n            this.addIcon(element, 'map-marker');\n        }\n    }\n\n    private notifyValueSelected(feature: any) {\n\n        // Cancel previous place details request\n        if (this.currentPlaceDetailsPromiseReject) {\n            this.currentPlaceDetailsPromiseReject({\n                canceled: true\n            });\n            this.currentPlaceDetailsPromiseReject = null;\n        }\n\n        if (!this.options.addDetails || !feature || feature.properties.nonVerifiedParts?.length) {\n            this.changeCallbacks.forEach(callback => callback(feature));\n        } else {\n\n            let promise;\n\n            if (this.sendPlaceDetailsRequestAlt) {\n                promise = this.sendPlaceDetailsRequestAlt(feature, this)\n            } else {\n                promise = this.sendPlaceDetailsRequest(feature); \n            }\n\n            promise.then((detailesFeature: any) => {\n                this.changeCallbacks.forEach(callback => callback(detailesFeature));\n                this.currentPlaceDetailsPromiseReject = null;\n            }, (err) => {\n                if (!err.canceled) {\n                    console.log(err);\n                    this.changeCallbacks.forEach(callback => callback(feature));\n                    this.currentPlaceDetailsPromiseReject = null;\n                }\n            });\n        }\n    }\n\n    private notifySuggestions(features: any) {\n        this.suggestionsChangeCallbacks.forEach(callback => callback(features));\n    }\n\n    private notifyOpened() {\n        this.openCallbacks.forEach(callback => callback(true));\n    }\n\n    private notifyClosed() {\n        this.closeCallbacks.forEach(callback => callback(false));\n    }\n\n    private openDropdownAgain() {\n        const event = document.createEvent('Event');\n        event.initEvent('input', true, true);\n        this.inputElement.dispatchEvent(event);\n    }\n\n    private generatePlacesUrlUrl(placeId: string): string {\n        let url = `${this.placeDetailsUrl}?id=${placeId}&apiKey=${this.apiKey}`;\n        if (this.options.lang) {\n            url += `&lang=${this.options.lang}`;\n        }\n        return url;\n    }\n\n    private generateUrl(value: string): string {\n        let url = `${this.geocoderUrl}?text=${encodeURIComponent(value)}&apiKey=${this.apiKey}`;\n        // Add type of the location if set. Learn more about possible parameters on https://apidocs.geoapify.com/docs/geocoding/api/api\n        if (this.options.type) {\n            url += `&type=${this.options.type}`;\n        }\n\n        if (this.options.limit) {\n            url += `&limit=${this.options.limit}`;\n        }\n\n        if (this.options.lang) {\n            url += `&lang=${this.options.lang}`;\n        }\n\n        const filters = [];\n        const filterByCountryCodes: ByCountryCodeOptions = this.options.filter[this.BY_COUNTRYCODE] as ByCountryCodeOptions;\n        const filterByCircle: ByCircleOptions = this.options.filter[this.BY_CIRCLE] as ByCircleOptions;\n        const filterByRect: ByRectOptions = this.options.filter[this.BY_RECT] as ByRectOptions;\n        const filterByPlace: string = this.options.filter[this.BY_PLACE] as string;\n\n        if (filterByCountryCodes && filterByCountryCodes.length) {\n            filters.push(`countrycode:${filterByCountryCodes.join(',').toLowerCase()}`);\n        }\n\n        if (filterByCircle && this.isLatitude(filterByCircle.lat) && this.isLongitude(filterByCircle.lon) && filterByCircle.radiusMeters > 0) {\n            filters.push(`circle:${filterByCircle.lon},${filterByCircle.lat},${filterByCircle.radiusMeters}`);\n        }\n\n        if (filterByRect && this.isLatitude(filterByRect.lat1) && this.isLongitude(filterByRect.lon1) && this.isLatitude(filterByRect.lat2) && this.isLongitude(filterByRect.lon2)) {\n            filters.push(`rect:${filterByRect.lon1},${filterByRect.lat1},${filterByRect.lon2},${filterByRect.lat2}`);\n        }\n\n        if (filterByPlace) {\n            filters.push(`place:${filterByPlace}`);\n        }\n\n\n        url += filters.length ? `&filter=${filters.join('|')}` : '';\n\n        const bias = [];\n        const biasByCountryCodes: ByCountryCodeOptions = this.options.bias[this.BY_COUNTRYCODE] as ByCountryCodeOptions;\n        const biasByCircle: ByCircleOptions = this.options.bias[this.BY_CIRCLE] as ByCircleOptions;\n        const biasByRect: ByRectOptions = this.options.bias[this.BY_RECT] as ByRectOptions;\n        const biasByProximity: ByProximityOptions = this.options.bias[this.BY_PROXIMITY] as ByProximityOptions;\n\n        if (biasByCountryCodes && biasByCountryCodes.length) {\n            bias.push(`countrycode:${biasByCountryCodes.join(',').toLowerCase()}`);\n        }\n\n        if (biasByCircle && this.isLatitude(biasByCircle.lat) && this.isLongitude(biasByCircle.lon) && biasByCircle.radiusMeters > 0) {\n            bias.push(`circle:${biasByCircle.lon},${biasByCircle.lat},${biasByCircle.radiusMeters}`);\n        }\n\n        if (biasByRect && this.isLatitude(biasByRect.lat1) && this.isLongitude(biasByRect.lon1) && this.isLatitude(biasByRect.lat2) && this.isLongitude(biasByRect.lon2)) {\n            bias.push(`rect:${biasByRect.lon1},${biasByRect.lat1},${biasByRect.lon2},${biasByRect.lat2}`);\n        }\n\n        if (biasByProximity && this.isLatitude(biasByProximity.lat) && this.isLongitude(biasByProximity.lon)) {\n            bias.push(`proximity:${biasByProximity.lon},${biasByProximity.lat}`);\n        }\n\n        url += bias.length ? `&bias=${bias.join('|')}` : '';\n\n        return url;\n    }\n\n    private isLatitude(num: any) {\n        return num !== '' && num !== null && isFinite(num) && Math.abs(num) <= 90;\n    }\n\n    private isLongitude(num: any) {\n        return num !== '' && num !== null && isFinite(num) && Math.abs(num) <= 180;\n    }\n}\n\nexport interface GeocoderAutocompleteOptions {\n    type?: LocationType;\n    lang?: SupportedLanguage;\n    limit?: number;\n    placeholder?: string;\n    debounceDelay?: number;\n\n    filter?: { [key: string]: ByCircleOptions | ByCountryCodeOptions | ByRectOptions | string },\n    bias?: { [key: string]: ByCircleOptions | ByCountryCodeOptions | ByRectOptions | ByProximityOptions },\n\n    skipIcons?: boolean;\n\n/**\n * @deprecated The property should not be used; it is true by default. Use the addDetails property to add details.\n */\n    skipDetails?: boolean;\n\n    addDetails?: boolean;\n\n    skipSelectionOnArrowKey?: boolean;\n\n    // to remove in the next version\n    position?: GeoPosition;\n    countryCodes?: CountyCode[];\n\n    // extend results with non verified values if needed\n    allowNonVerifiedHouseNumber?: boolean;\n    allowNonVerifiedStreet?: boolean;\n}\n\nexport interface GeoPosition {\n    lat: number;\n    lon: number;\n}\n\nexport type ByCountryCodeOptions = CountyCode[];\n\nexport interface ByProximityOptions {\n    lon: number;\n    lat: number;\n}\n\nexport interface ByCircleOptions {\n    lon: number;\n    lat: number;\n    radiusMeters: number;\n}\n\nexport interface ByRectOptions {\n    lon1: number;\n    lat1: number;\n    lon2: number;\n    lat2: number;\n}\n\nexport type LocationType = 'country' | 'state' | 'city' | 'postcode' | 'street' | 'amenity';\nexport type SupportedLanguage = \"ab\" | \"aa\" | \"af\" | \"ak\" | \"sq\" | \"am\" | \"ar\" | \"an\" | \"hy\" | \"as\" | \"av\" | \"ae\" | \"ay\" | \"az\" | \"bm\" | \"ba\" | \"eu\" | \"be\" | \"bn\" | \"bh\" | \"bi\" | \"bs\" | \"br\" | \"bg\" | \"my\" | \"ca\" | \"ch\" | \"ce\" | \"ny\" | \"zh\" | \"cv\" | \"kw\" | \"co\" | \"cr\" | \"hr\" | \"cs\" | \"da\" | \"dv\" | \"nl\" | \"en\" | \"eo\" | \"et\" | \"ee\" | \"fo\" | \"fj\" | \"fi\" | \"fr\" | \"ff\" | \"gl\" | \"ka\" | \"de\" | \"el\" | \"gn\" | \"gu\" | \"ht\" | \"ha\" | \"he\" | \"hz\" | \"hi\" | \"ho\" | \"hu\" | \"ia\" | \"id\" | \"ie\" | \"ga\" | \"ig\" | \"ik\" | \"io\" | \"is\" | \"it\" | \"iu\" | \"ja\" | \"jv\" | \"kl\" | \"kn\" | \"kr\" | \"ks\" | \"kk\" | \"km\" | \"ki\" | \"rw\" | \"ky\" | \"kv\" | \"kg\" | \"ko\" | \"ku\" | \"kj\" | \"la\" | \"lb\" | \"lg\" | \"li\" | \"ln\" | \"lo\" | \"lt\" | \"lu\" | \"lv\" | \"gv\" | \"mk\" | \"mg\" | \"ms\" | \"ml\" | \"mt\" | \"mi\" | \"mr\" | \"mh\" | \"mn\" | \"na\" | \"nv\" | \"nb\" | \"nd\" | \"ne\" | \"ng\" | \"nn\" | \"no\" | \"ii\" | \"nr\" | \"oc\" | \"oj\" | \"cu\" | \"om\" | \"or\" | \"os\" | \"pa\" | \"pi\" | \"fa\" | \"pl\" | \"ps\" | \"pt\" | \"qu\" | \"rm\" | \"rn\" | \"ro\" | \"ru\" | \"sa\" | \"sc\" | \"sd\" | \"se\" | \"sm\" | \"sg\" | \"sr\" | \"gd\" | \"sn\" | \"si\" | \"sk\" | \"sl\" | \"so\" | \"st\" | \"es\" | \"su\" | \"sw\" | \"ss\" | \"sv\" | \"ta\" | \"te\" | \"tg\" | \"th\" | \"ti\" | \"bo\" | \"tk\" | \"tl\" | \"tn\" | \"to\" | \"tr\" | \"ts\" | \"tt\" | \"tw\" | \"ty\" | \"ug\" | \"uk\" | \"ur\" | \"uz\" | \"ve\" | \"vi\" | \"vo\" | \"wa\" | \"cy\" | \"wo\" | \"fy\" | \"xh\" | \"yi\" | \"yo\" | \"za\";\nexport type CountyCode = \"none\" | \"auto\" | \"ad\" | \"ae\" | \"af\" | \"ag\" | \"ai\" | \"al\" | \"am\" | \"an\" | \"ao\" | \"ap\" | \"aq\" | \"ar\" | \"as\" | \"at\" | \"au\" | \"aw\" | \"az\" | \"ba\" | \"bb\" | \"bd\" | \"be\" | \"bf\" | \"bg\" | \"bh\" | \"bi\" | \"bj\" | \"bm\" | \"bn\" | \"bo\" | \"br\" | \"bs\" | \"bt\" | \"bv\" | \"bw\" | \"by\" | \"bz\" | \"ca\" | \"cc\" | \"cd\" | \"cf\" | \"cg\" | \"ch\" | \"ci\" | \"ck\" | \"cl\" | \"cm\" | \"cn\" | \"co\" | \"cr\" | \"cu\" | \"cv\" | \"cx\" | \"cy\" | \"cz\" | \"de\" | \"dj\" | \"dk\" | \"dm\" | \"do\" | \"dz\" | \"ec\" | \"ee\" | \"eg\" | \"eh\" | \"er\" | \"es\" | \"et\" | \"eu\" | \"fi\" | \"fj\" | \"fk\" | \"fm\" | \"fo\" | \"fr\" | \"ga\" | \"gb\" | \"gd\" | \"ge\" | \"gf\" | \"gh\" | \"gi\" | \"gl\" | \"gm\" | \"gn\" | \"gp\" | \"gq\" | \"gr\" | \"gs\" | \"gt\" | \"gu\" | \"gw\" | \"gy\" | \"hk\" | \"hm\" | \"hn\" | \"hr\" | \"ht\" | \"hu\" | \"id\" | \"ie\" | \"il\" | \"in\" | \"io\" | \"iq\" | \"ir\" | \"is\" | \"it\" | \"jm\" | \"jo\" | \"jp\" | \"ke\" | \"kg\" | \"kh\" | \"ki\" | \"km\" | \"kn\" | \"kp\" | \"kr\" | \"kw\" | \"ky\" | \"kz\" | \"la\" | \"lb\" | \"lc\" | \"li\" | \"lk\" | \"lr\" | \"ls\" | \"lt\" | \"lu\" | \"lv\" | \"ly\" | \"ma\" | \"mc\" | \"md\" | \"me\" | \"mg\" | \"mh\" | \"mk\" | \"ml\" | \"mm\" | \"mn\" | \"mo\" | \"mp\" | \"mq\" | \"mr\" | \"ms\" | \"mt\" | \"mu\" | \"mv\" | \"mw\" | \"mx\" | \"my\" | \"mz\" | \"na\" | \"nc\" | \"ne\" | \"nf\" | \"ng\" | \"ni\" | \"nl\" | \"no\" | \"np\" | \"nr\" | \"nu\" | \"nz\" | \"om\" | \"pa\" | \"pe\" | \"pf\" | \"pg\" | \"ph\" | \"pk\" | \"pl\" | \"pm\" | \"pr\" | \"ps\" | \"pt\" | \"pw\" | \"py\" | \"qa\" | \"re\" | \"ro\" | \"rs\" | \"ru\" | \"rw\" | \"sa\" | \"sb\" | \"sc\" | \"sd\" | \"se\" | \"sg\" | \"sh\" | \"si\" | \"sj\" | \"sk\" | \"sl\" | \"sm\" | \"sn\" | \"so\" | \"sr\" | \"st\" | \"sv\" | \"sy\" | \"sz\" | \"tc\" | \"td\" | \"tf\" | \"tg\" | \"th\" | \"tj\" | \"tk\" | \"tm\" | \"tn\" | \"to\" | \"tr\" | \"tt\" | \"tv\" | \"tw\" | \"tz\" | \"ua\" | \"ug\" | \"um\" | \"us\" | \"uy\" | \"uz\" | \"va\" | \"vc\" | \"ve\" | \"vg\" | \"vi\" | \"vn\" | \"vu\" | \"wf\" | \"ws\" | \"ye\" | \"yt\" | \"za\" | \"zm\" | \"zw\";\n"],
  "mappings": "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",
  "names": ["GeocoderAutocomplete", "container", "apiKey", "options", "inputElement", "inputClearButton", "autocompleteItemsElement", "focusedItemIndex", "currentItems", "currentPromiseReject", "currentPlaceDetailsPromiseReject", "currentTimeout", "changeCallbacks", "suggestionsChangeCallbacks", "inputCallbacks", "openCallbacks", "closeCallbacks", "preprocessHook", "postprocessHook", "suggestionsFilter", "sendGeocoderRequestAlt", "sendPlaceDetailsRequestAlt", "geocoderUrl", "placeDetailsUrl", "limit", "debounceDelay", "BY_COUNTRYCODE", "BY_RECT", "BY_CIRCLE", "BY_PROXIMITY", "BY_PLACE", "this", "filter", "bias", "countryCodes", "addFilterByCountry", "position", "addBiasByProximity", "document", "createElement", "classList", "add", "setAttribute", "placeholder", "appendChild", "addIcon", "addEventListener", "clearFieldAndNotify", "bind", "onUserInput", "onUserKeyPress", "event", "target", "closeDropDownList", "openDropdownAgain", "type", "lang", "codes", "console", "warn", "value", "remove", "getValue", "filterByCircle", "filterByRect", "filterByPlace", "clearFilters", "biasByCircle", "biasByRect", "biasByProximity", "clearBias", "operation", "callback", "indexOf", "push", "splice", "on", "current", "currentListener", "off", "suggestionsFilterFunc", "preprocessHookFunc", "postprocessHookFunc", "sendGeocoderRequestFunc", "sendPlaceDetailsRequestFunc", "isOpen", "close", "open", "Promise", "resolve", "reject", "url", "generateUrl", "fetch", "then", "response", "ok", "json", "data", "feature", "properties", "datasource", "sourcename", "place_id", "generatePlacesUrlUrl", "features", "length", "currentValue", "userEnteredValue", "forEach", "canceled", "window", "clearTimeout", "setTimeout", "promise", "sendGeocoderRequest", "query", "parsed", "allowNonVerifiedHouseNumber", "allowNonVerifiedStreet", "extendByNonVerifiedValues", "notifySuggestions", "notifyOpened", "index", "itemElement", "skipIcons", "iconElement", "addFeatureIcon", "result_type", "country_code", "textElement", "innerHTML", "getStyledAddressSingleValue", "getStyledAddress", "e", "stopPropagation", "setValueAndNotify", "err", "log", "featureProperties", "street", "housenumber", "houseNumberAndStreetFormatsPerCountry", "format", "Object", "keys", "find", "key", "replace", "m", "toUpperCase", "addressPart", "address_line1", "address_line2", "formatted", "parsedAddress", "rank", "match_type", "addHouseNumberToFormatted", "nonVerifiedParts", "displayValue", "valueIndex", "toLowerCase", "substring", "mainPart", "secondaryPart", "parts", "split", "map", "part", "trim", "name", "slice", "join", "mainElements", "Math", "min", "max", "itemElements", "getElementsByTagName", "code", "preventDefault", "setActive", "skipSelectionOnArrowKey", "items", "i", "notifyValueSelected", "removeChild", "notifyClosed", "element", "icon", "icons", "path", "viewbox", "road", "city", "svgElement", "createElementNS", "countryCode", "iconMap", "unknown", "amenity", "building", "suburb", "district", "postcode", "county", "state", "countryData", "countiesData", "emojiElement", "innerText", "emoji", "addDetails", "sendPlaceDetailsRequest", "detailesFeature", "createEvent", "initEvent", "dispatchEvent", "placeId", "encodeURIComponent", "filters", "filterByCountryCodes", "isLatitude", "lat", "isLongitude", "lon", "radiusMeters", "lat1", "lon1", "lat2", "lon2", "biasByCountryCodes", "num", "isFinite", "abs"]
}
