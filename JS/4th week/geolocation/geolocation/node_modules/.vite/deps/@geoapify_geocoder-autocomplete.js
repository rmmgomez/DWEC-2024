import {
  __publicField
} from "./chunk-ZC22LKFR.js";

// node_modules/@geoapify/geocoder-autocomplete/dist/index.min.esm.js
var e = [{ code: "AD", emoji: "ðŸ‡¦ðŸ‡©", unicode: "U+1F1E6 U+1F1E9", name: "Andorra", title: "flag for Andorra", dialCode: "+376" }, { code: "AE", emoji: "ðŸ‡¦ðŸ‡ª", unicode: "U+1F1E6 U+1F1EA", name: "United Arab Emirates", title: "flag for United Arab Emirates", dialCode: "+971" }, { code: "AF", emoji: "ðŸ‡¦ðŸ‡«", unicode: "U+1F1E6 U+1F1EB", name: "Afghanistan", title: "flag for Afghanistan", dialCode: "+93" }, { code: "AG", emoji: "ðŸ‡¦ðŸ‡¬", unicode: "U+1F1E6 U+1F1EC", name: "Antigua and Barbuda", title: "flag for Antigua and Barbuda", dialCode: "+1268" }, { code: "AI", emoji: "ðŸ‡¦ðŸ‡®", unicode: "U+1F1E6 U+1F1EE", name: "Anguilla", title: "flag for Anguilla", dialCode: "+1 264" }, { code: "AL", emoji: "ðŸ‡¦ðŸ‡±", unicode: "U+1F1E6 U+1F1F1", name: "Albania", title: "flag for Albania", dialCode: "+355" }, { code: "AM", emoji: "ðŸ‡¦ðŸ‡²", unicode: "U+1F1E6 U+1F1F2", name: "Armenia", title: "flag for Armenia", dialCode: "+374" }, { code: "AO", emoji: "ðŸ‡¦ðŸ‡´", unicode: "U+1F1E6 U+1F1F4", name: "Angola", title: "flag for Angola", dialCode: "+244" }, { code: "AQ", emoji: "ðŸ‡¦ðŸ‡¶", unicode: "U+1F1E6 U+1F1F6", name: "Antarctica", title: "flag for Antarctica", dialCode: null }, { code: "AR", emoji: "ðŸ‡¦ðŸ‡·", unicode: "U+1F1E6 U+1F1F7", name: "Argentina", title: "flag for Argentina", dialCode: "+54" }, { code: "AS", emoji: "ðŸ‡¦ðŸ‡¸", unicode: "U+1F1E6 U+1F1F8", name: "American Samoa", title: "flag for American Samoa", dialCode: "+1 684" }, { code: "AT", emoji: "ðŸ‡¦ðŸ‡¹", unicode: "U+1F1E6 U+1F1F9", name: "Austria", title: "flag for Austria", dialCode: "+43" }, { code: "AU", emoji: "ðŸ‡¦ðŸ‡º", unicode: "U+1F1E6 U+1F1FA", name: "Australia", title: "flag for Australia", dialCode: "+61" }, { code: "AW", emoji: "ðŸ‡¦ðŸ‡¼", unicode: "U+1F1E6 U+1F1FC", name: "Aruba", title: "flag for Aruba", dialCode: "+297" }, { code: "AX", emoji: "ðŸ‡¦ðŸ‡½", unicode: "U+1F1E6 U+1F1FD", name: "Ã…land Islands", title: "flag for Ã…land Islands", dialCode: "" }, { code: "AZ", emoji: "ðŸ‡¦ðŸ‡¿", unicode: "U+1F1E6 U+1F1FF", name: "Azerbaijan", title: "flag for Azerbaijan", dialCode: "+994" }, { code: "BA", emoji: "ðŸ‡§ðŸ‡¦", unicode: "U+1F1E7 U+1F1E6", name: "Bosnia and Herzegovina", title: "flag for Bosnia and Herzegovina", dialCode: "+387" }, { code: "BB", emoji: "ðŸ‡§ðŸ‡§", unicode: "U+1F1E7 U+1F1E7", name: "Barbados", title: "flag for Barbados", dialCode: "+1 246" }, { code: "BD", emoji: "ðŸ‡§ðŸ‡©", unicode: "U+1F1E7 U+1F1E9", name: "Bangladesh", title: "flag for Bangladesh", dialCode: "+880" }, { code: "BE", emoji: "ðŸ‡§ðŸ‡ª", unicode: "U+1F1E7 U+1F1EA", name: "Belgium", title: "flag for Belgium", dialCode: "+32" }, { code: "BF", emoji: "ðŸ‡§ðŸ‡«", unicode: "U+1F1E7 U+1F1EB", name: "Burkina Faso", title: "flag for Burkina Faso", dialCode: "+226" }, { code: "BG", emoji: "ðŸ‡§ðŸ‡¬", unicode: "U+1F1E7 U+1F1EC", name: "Bulgaria", title: "flag for Bulgaria", dialCode: "+359" }, { code: "BH", emoji: "ðŸ‡§ðŸ‡­", unicode: "U+1F1E7 U+1F1ED", name: "Bahrain", title: "flag for Bahrain", dialCode: "+973" }, { code: "BI", emoji: "ðŸ‡§ðŸ‡®", unicode: "U+1F1E7 U+1F1EE", name: "Burundi", title: "flag for Burundi", dialCode: "+257" }, { code: "BJ", emoji: "ðŸ‡§ðŸ‡¯", unicode: "U+1F1E7 U+1F1EF", name: "Benin", title: "flag for Benin", dialCode: "+229" }, { code: "BL", emoji: "ðŸ‡§ðŸ‡±", unicode: "U+1F1E7 U+1F1F1", name: "Saint BarthÃ©lemy", title: "flag for Saint BarthÃ©lemy", dialCode: "+590" }, { code: "BM", emoji: "ðŸ‡§ðŸ‡²", unicode: "U+1F1E7 U+1F1F2", name: "Bermuda", title: "flag for Bermuda", dialCode: "+1 441" }, { code: "BN", emoji: "ðŸ‡§ðŸ‡³", unicode: "U+1F1E7 U+1F1F3", name: "Brunei Darussalam", title: "flag for Brunei Darussalam", dialCode: "+673" }, { code: "BO", emoji: "ðŸ‡§ðŸ‡´", unicode: "U+1F1E7 U+1F1F4", name: "Bolivia", title: "flag for Bolivia", dialCode: "+591" }, { code: "BQ", emoji: "ðŸ‡§ðŸ‡¶", unicode: "U+1F1E7 U+1F1F6", name: "Bonaire, Sint Eustatius and Saba", title: "flag for Bonaire, Sint Eustatius and Saba" }, { code: "BR", emoji: "ðŸ‡§ðŸ‡·", unicode: "U+1F1E7 U+1F1F7", name: "Brazil", title: "flag for Brazil", dialCode: "+55" }, { code: "BS", emoji: "ðŸ‡§ðŸ‡¸", unicode: "U+1F1E7 U+1F1F8", name: "Bahamas", title: "flag for Bahamas", dialCode: "+1 242" }, { code: "BT", emoji: "ðŸ‡§ðŸ‡¹", unicode: "U+1F1E7 U+1F1F9", name: "Bhutan", title: "flag for Bhutan", dialCode: "+975" }, { code: "BV", emoji: "ðŸ‡§ðŸ‡»", unicode: "U+1F1E7 U+1F1FB", name: "Bouvet Island", title: "flag for Bouvet Island" }, { code: "BW", emoji: "ðŸ‡§ðŸ‡¼", unicode: "U+1F1E7 U+1F1FC", name: "Botswana", title: "flag for Botswana", dialCode: "+267" }, { code: "BY", emoji: "ðŸ‡§ðŸ‡¾", unicode: "U+1F1E7 U+1F1FE", name: "Belarus", title: "flag for Belarus", dialCode: "+375" }, { code: "BZ", emoji: "ðŸ‡§ðŸ‡¿", unicode: "U+1F1E7 U+1F1FF", name: "Belize", title: "flag for Belize", dialCode: "+501" }, { code: "CA", emoji: "ðŸ‡¨ðŸ‡¦", unicode: "U+1F1E8 U+1F1E6", name: "Canada", title: "flag for Canada", dialCode: "+1" }, { code: "CC", emoji: "ðŸ‡¨ðŸ‡¨", unicode: "U+1F1E8 U+1F1E8", name: "Cocos (Keeling) Islands", title: "flag for Cocos (Keeling) Islands", dialCode: "+61" }, { code: "CD", emoji: "ðŸ‡¨ðŸ‡©", unicode: "U+1F1E8 U+1F1E9", name: "Congo", title: "flag for Congo", dialCode: "+243" }, { code: "CF", emoji: "ðŸ‡¨ðŸ‡«", unicode: "U+1F1E8 U+1F1EB", name: "Central African Republic", title: "flag for Central African Republic", dialCode: "+236" }, { code: "CG", emoji: "ðŸ‡¨ðŸ‡¬", unicode: "U+1F1E8 U+1F1EC", name: "Congo", title: "flag for Congo", dialCode: "+242" }, { code: "CH", emoji: "ðŸ‡¨ðŸ‡­", unicode: "U+1F1E8 U+1F1ED", name: "Switzerland", title: "flag for Switzerland", dialCode: "+41" }, { code: "CI", emoji: "ðŸ‡¨ðŸ‡®", unicode: "U+1F1E8 U+1F1EE", name: "CÃ´te D'Ivoire", title: "flag for CÃ´te D'Ivoire", dialCode: "+225" }, { code: "CK", emoji: "ðŸ‡¨ðŸ‡°", unicode: "U+1F1E8 U+1F1F0", name: "Cook Islands", title: "flag for Cook Islands", dialCode: "+682" }, { code: "CL", emoji: "ðŸ‡¨ðŸ‡±", unicode: "U+1F1E8 U+1F1F1", name: "Chile", title: "flag for Chile", dialCode: "+56" }, { code: "CM", emoji: "ðŸ‡¨ðŸ‡²", unicode: "U+1F1E8 U+1F1F2", name: "Cameroon", title: "flag for Cameroon", dialCode: "+237" }, { code: "CN", emoji: "ðŸ‡¨ðŸ‡³", unicode: "U+1F1E8 U+1F1F3", name: "China", title: "flag for China", dialCode: "+86" }, { code: "CO", emoji: "ðŸ‡¨ðŸ‡´", unicode: "U+1F1E8 U+1F1F4", name: "Colombia", title: "flag for Colombia", dialCode: "+57" }, { code: "CR", emoji: "ðŸ‡¨ðŸ‡·", unicode: "U+1F1E8 U+1F1F7", name: "Costa Rica", title: "flag for Costa Rica", dialCode: "+506" }, { code: "CU", emoji: "ðŸ‡¨ðŸ‡º", unicode: "U+1F1E8 U+1F1FA", name: "Cuba", title: "flag for Cuba", dialCode: "+53" }, { code: "CV", emoji: "ðŸ‡¨ðŸ‡»", unicode: "U+1F1E8 U+1F1FB", name: "Cape Verde", title: "flag for Cape Verde", dialCode: "+238" }, { code: "CW", emoji: "ðŸ‡¨ðŸ‡¼", unicode: "U+1F1E8 U+1F1FC", name: "CuraÃ§ao", title: "flag for CuraÃ§ao" }, { code: "CX", emoji: "ðŸ‡¨ðŸ‡½", unicode: "U+1F1E8 U+1F1FD", name: "Christmas Island", title: "flag for Christmas Island", dialCode: "+61" }, { code: "CY", emoji: "ðŸ‡¨ðŸ‡¾", unicode: "U+1F1E8 U+1F1FE", name: "Cyprus", title: "flag for Cyprus", dialCode: "+537" }, { code: "CZ", emoji: "ðŸ‡¨ðŸ‡¿", unicode: "U+1F1E8 U+1F1FF", name: "Czech Republic", title: "flag for Czech Republic", dialCode: "+420" }, { code: "DE", emoji: "ðŸ‡©ðŸ‡ª", unicode: "U+1F1E9 U+1F1EA", name: "Germany", title: "flag for Germany", dialCode: "+49" }, { code: "DJ", emoji: "ðŸ‡©ðŸ‡¯", unicode: "U+1F1E9 U+1F1EF", name: "Djibouti", title: "flag for Djibouti", dialCode: "+253" }, { code: "DK", emoji: "ðŸ‡©ðŸ‡°", unicode: "U+1F1E9 U+1F1F0", name: "Denmark", title: "flag for Denmark", dialCode: "+45" }, { code: "DM", emoji: "ðŸ‡©ðŸ‡²", unicode: "U+1F1E9 U+1F1F2", name: "Dominica", title: "flag for Dominica", dialCode: "+1 767" }, { code: "DO", emoji: "ðŸ‡©ðŸ‡´", unicode: "U+1F1E9 U+1F1F4", name: "Dominican Republic", title: "flag for Dominican Republic", dialCode: "+1 849" }, { code: "DZ", emoji: "ðŸ‡©ðŸ‡¿", unicode: "U+1F1E9 U+1F1FF", name: "Algeria", title: "flag for Algeria", dialCode: "+213" }, { code: "EC", emoji: "ðŸ‡ªðŸ‡¨", unicode: "U+1F1EA U+1F1E8", name: "Ecuador", title: "flag for Ecuador", dialCode: "+593" }, { code: "EE", emoji: "ðŸ‡ªðŸ‡ª", unicode: "U+1F1EA U+1F1EA", name: "Estonia", title: "flag for Estonia", dialCode: "+372" }, { code: "EG", emoji: "ðŸ‡ªðŸ‡¬", unicode: "U+1F1EA U+1F1EC", name: "Egypt", title: "flag for Egypt", dialCode: "+20" }, { code: "EH", emoji: "ðŸ‡ªðŸ‡­", unicode: "U+1F1EA U+1F1ED", name: "Western Sahara", title: "flag for Western Sahara" }, { code: "ER", emoji: "ðŸ‡ªðŸ‡·", unicode: "U+1F1EA U+1F1F7", name: "Eritrea", title: "flag for Eritrea", dialCode: "+291" }, { code: "ES", emoji: "ðŸ‡ªðŸ‡¸", unicode: "U+1F1EA U+1F1F8", name: "Spain", title: "flag for Spain", dialCode: "+34" }, { code: "ET", emoji: "ðŸ‡ªðŸ‡¹", unicode: "U+1F1EA U+1F1F9", name: "Ethiopia", title: "flag for Ethiopia", dialCode: "+251" }, { code: "EU", emoji: "ðŸ‡ªðŸ‡º", unicode: "U+1F1EA U+1F1FA", name: "European Union", title: "flag for European Union" }, { code: "FI", emoji: "ðŸ‡«ðŸ‡®", unicode: "U+1F1EB U+1F1EE", name: "Finland", title: "flag for Finland", dialCode: "+358" }, { code: "FJ", emoji: "ðŸ‡«ðŸ‡¯", unicode: "U+1F1EB U+1F1EF", name: "Fiji", title: "flag for Fiji", dialCode: "+679" }, { code: "FK", emoji: "ðŸ‡«ðŸ‡°", unicode: "U+1F1EB U+1F1F0", name: "Falkland Islands (Malvinas)", title: "flag for Falkland Islands (Malvinas)", dialCode: "+500" }, { code: "FM", emoji: "ðŸ‡«ðŸ‡²", unicode: "U+1F1EB U+1F1F2", name: "Micronesia", title: "flag for Micronesia", dialCode: "+691" }, { code: "FO", emoji: "ðŸ‡«ðŸ‡´", unicode: "U+1F1EB U+1F1F4", name: "Faroe Islands", title: "flag for Faroe Islands", dialCode: "+298" }, { code: "FR", emoji: "ðŸ‡«ðŸ‡·", unicode: "U+1F1EB U+1F1F7", name: "France", title: "flag for France", dialCode: "+33" }, { code: "GA", emoji: "ðŸ‡¬ðŸ‡¦", unicode: "U+1F1EC U+1F1E6", name: "Gabon", title: "flag for Gabon", dialCode: "+241" }, { code: "GB", emoji: "ðŸ‡¬ðŸ‡§", unicode: "U+1F1EC U+1F1E7", name: "United Kingdom", title: "flag for United Kingdom", dialCode: "+44" }, { code: "GD", emoji: "ðŸ‡¬ðŸ‡©", unicode: "U+1F1EC U+1F1E9", name: "Grenada", title: "flag for Grenada", dialCode: "+1 473" }, { code: "GE", emoji: "ðŸ‡¬ðŸ‡ª", unicode: "U+1F1EC U+1F1EA", name: "Georgia", title: "flag for Georgia", dialCode: "+995" }, { code: "GF", emoji: "ðŸ‡¬ðŸ‡«", unicode: "U+1F1EC U+1F1EB", name: "French Guiana", title: "flag for French Guiana", dialCode: "+594" }, { code: "GG", emoji: "ðŸ‡¬ðŸ‡¬", unicode: "U+1F1EC U+1F1EC", name: "Guernsey", title: "flag for Guernsey", dialCode: "+44" }, { code: "GH", emoji: "ðŸ‡¬ðŸ‡­", unicode: "U+1F1EC U+1F1ED", name: "Ghana", title: "flag for Ghana", dialCode: "+233" }, { code: "GI", emoji: "ðŸ‡¬ðŸ‡®", unicode: "U+1F1EC U+1F1EE", name: "Gibraltar", title: "flag for Gibraltar", dialCode: "+350" }, { code: "GL", emoji: "ðŸ‡¬ðŸ‡±", unicode: "U+1F1EC U+1F1F1", name: "Greenland", title: "flag for Greenland", dialCode: "+299" }, { code: "GM", emoji: "ðŸ‡¬ðŸ‡²", unicode: "U+1F1EC U+1F1F2", name: "Gambia", title: "flag for Gambia", dialCode: "+220" }, { code: "GN", emoji: "ðŸ‡¬ðŸ‡³", unicode: "U+1F1EC U+1F1F3", name: "Guinea", title: "flag for Guinea", dialCode: "+224" }, { code: "GP", emoji: "ðŸ‡¬ðŸ‡µ", unicode: "U+1F1EC U+1F1F5", name: "Guadeloupe", title: "flag for Guadeloupe", dialCode: "+590" }, { code: "GQ", emoji: "ðŸ‡¬ðŸ‡¶", unicode: "U+1F1EC U+1F1F6", name: "Equatorial Guinea", title: "flag for Equatorial Guinea", dialCode: "+240" }, { code: "GR", emoji: "ðŸ‡¬ðŸ‡·", unicode: "U+1F1EC U+1F1F7", name: "Greece", title: "flag for Greece", dialCode: "+30" }, { code: "GS", emoji: "ðŸ‡¬ðŸ‡¸", unicode: "U+1F1EC U+1F1F8", name: "South Georgia", title: "flag for South Georgia", dialCode: "+500" }, { code: "GT", emoji: "ðŸ‡¬ðŸ‡¹", unicode: "U+1F1EC U+1F1F9", name: "Guatemala", title: "flag for Guatemala", dialCode: "+502" }, { code: "GU", emoji: "ðŸ‡¬ðŸ‡º", unicode: "U+1F1EC U+1F1FA", name: "Guam", title: "flag for Guam", dialCode: "+1 671" }, { code: "GW", emoji: "ðŸ‡¬ðŸ‡¼", unicode: "U+1F1EC U+1F1FC", name: "Guinea-Bissau", title: "flag for Guinea-Bissau", dialCode: "+245" }, { code: "GY", emoji: "ðŸ‡¬ðŸ‡¾", unicode: "U+1F1EC U+1F1FE", name: "Guyana", title: "flag for Guyana", dialCode: "+595" }, { code: "HK", emoji: "ðŸ‡­ðŸ‡°", unicode: "U+1F1ED U+1F1F0", name: "Hong Kong", title: "flag for Hong Kong", dialCode: "+852" }, { code: "HM", emoji: "ðŸ‡­ðŸ‡²", unicode: "U+1F1ED U+1F1F2", name: "Heard Island and Mcdonald Islands", title: "flag for Heard Island and Mcdonald Islands" }, { code: "HN", emoji: "ðŸ‡­ðŸ‡³", unicode: "U+1F1ED U+1F1F3", name: "Honduras", title: "flag for Honduras", dialCode: "+504" }, { code: "HR", emoji: "ðŸ‡­ðŸ‡·", unicode: "U+1F1ED U+1F1F7", name: "Croatia", title: "flag for Croatia", dialCode: "+385" }, { code: "HT", emoji: "ðŸ‡­ðŸ‡¹", unicode: "U+1F1ED U+1F1F9", name: "Haiti", title: "flag for Haiti", dialCode: "+509" }, { code: "HU", emoji: "ðŸ‡­ðŸ‡º", unicode: "U+1F1ED U+1F1FA", name: "Hungary", title: "flag for Hungary", dialCode: "+36" }, { code: "ID", emoji: "ðŸ‡®ðŸ‡©", unicode: "U+1F1EE U+1F1E9", name: "Indonesia", title: "flag for Indonesia", dialCode: "+62" }, { code: "IE", emoji: "ðŸ‡®ðŸ‡ª", unicode: "U+1F1EE U+1F1EA", name: "Ireland", title: "flag for Ireland", dialCode: "+353" }, { code: "IL", emoji: "ðŸ‡®ðŸ‡±", unicode: "U+1F1EE U+1F1F1", name: "Israel", title: "flag for Israel", dialCode: "+972" }, { code: "IM", emoji: "ðŸ‡®ðŸ‡²", unicode: "U+1F1EE U+1F1F2", name: "Isle of Man", title: "flag for Isle of Man", dialCode: "+44" }, { code: "IN", emoji: "ðŸ‡®ðŸ‡³", unicode: "U+1F1EE U+1F1F3", name: "India", title: "flag for India", dialCode: "+91" }, { code: "IO", emoji: "ðŸ‡®ðŸ‡´", unicode: "U+1F1EE U+1F1F4", name: "British Indian Ocean Territory", title: "flag for British Indian Ocean Territory", dialCode: "+246" }, { code: "IQ", emoji: "ðŸ‡®ðŸ‡¶", unicode: "U+1F1EE U+1F1F6", name: "Iraq", title: "flag for Iraq", dialCode: "+964" }, { code: "IR", emoji: "ðŸ‡®ðŸ‡·", unicode: "U+1F1EE U+1F1F7", name: "Iran", title: "flag for Iran", dialCode: "+98" }, { code: "IS", emoji: "ðŸ‡®ðŸ‡¸", unicode: "U+1F1EE U+1F1F8", name: "Iceland", title: "flag for Iceland", dialCode: "+354" }, { code: "IT", emoji: "ðŸ‡®ðŸ‡¹", unicode: "U+1F1EE U+1F1F9", name: "Italy", title: "flag for Italy", dialCode: "+39" }, { code: "JE", emoji: "ðŸ‡¯ðŸ‡ª", unicode: "U+1F1EF U+1F1EA", name: "Jersey", title: "flag for Jersey", dialCode: "+44" }, { code: "JM", emoji: "ðŸ‡¯ðŸ‡²", unicode: "U+1F1EF U+1F1F2", name: "Jamaica", title: "flag for Jamaica", dialCode: "+1 876" }, { code: "JO", emoji: "ðŸ‡¯ðŸ‡´", unicode: "U+1F1EF U+1F1F4", name: "Jordan", title: "flag for Jordan", dialCode: "+962" }, { code: "JP", emoji: "ðŸ‡¯ðŸ‡µ", unicode: "U+1F1EF U+1F1F5", name: "Japan", title: "flag for Japan", dialCode: "+81" }, { code: "KE", emoji: "ðŸ‡°ðŸ‡ª", unicode: "U+1F1F0 U+1F1EA", name: "Kenya", title: "flag for Kenya", dialCode: "+254" }, { code: "KG", emoji: "ðŸ‡°ðŸ‡¬", unicode: "U+1F1F0 U+1F1EC", name: "Kyrgyzstan", title: "flag for Kyrgyzstan", dialCode: "+996" }, { code: "KH", emoji: "ðŸ‡°ðŸ‡­", unicode: "U+1F1F0 U+1F1ED", name: "Cambodia", title: "flag for Cambodia", dialCode: "+855" }, { code: "KI", emoji: "ðŸ‡°ðŸ‡®", unicode: "U+1F1F0 U+1F1EE", name: "Kiribati", title: "flag for Kiribati", dialCode: "+686" }, { code: "KM", emoji: "ðŸ‡°ðŸ‡²", unicode: "U+1F1F0 U+1F1F2", name: "Comoros", title: "flag for Comoros", dialCode: "+269" }, { code: "KN", emoji: "ðŸ‡°ðŸ‡³", unicode: "U+1F1F0 U+1F1F3", name: "Saint Kitts and Nevis", title: "flag for Saint Kitts and Nevis", dialCode: "+1 869" }, { code: "KP", emoji: "ðŸ‡°ðŸ‡µ", unicode: "U+1F1F0 U+1F1F5", name: "North Korea", title: "flag for North Korea", dialCode: "+850" }, { code: "KR", emoji: "ðŸ‡°ðŸ‡·", unicode: "U+1F1F0 U+1F1F7", name: "South Korea", title: "flag for South Korea", dialCode: "+82" }, { code: "KW", emoji: "ðŸ‡°ðŸ‡¼", unicode: "U+1F1F0 U+1F1FC", name: "Kuwait", title: "flag for Kuwait", dialCode: "+965" }, { code: "KY", emoji: "ðŸ‡°ðŸ‡¾", unicode: "U+1F1F0 U+1F1FE", name: "Cayman Islands", title: "flag for Cayman Islands", dialCode: "+ 345" }, { code: "KZ", emoji: "ðŸ‡°ðŸ‡¿", unicode: "U+1F1F0 U+1F1FF", name: "Kazakhstan", title: "flag for Kazakhstan", dialCode: "+7 7" }, { code: "LA", emoji: "ðŸ‡±ðŸ‡¦", unicode: "U+1F1F1 U+1F1E6", name: "Lao People's Democratic Republic", title: "flag for Lao People's Democratic Republic", dialCode: "+856" }, { code: "LB", emoji: "ðŸ‡±ðŸ‡§", unicode: "U+1F1F1 U+1F1E7", name: "Lebanon", title: "flag for Lebanon", dialCode: "+961" }, { code: "LC", emoji: "ðŸ‡±ðŸ‡¨", unicode: "U+1F1F1 U+1F1E8", name: "Saint Lucia", title: "flag for Saint Lucia", dialCode: "+1 758" }, { code: "LI", emoji: "ðŸ‡±ðŸ‡®", unicode: "U+1F1F1 U+1F1EE", name: "Liechtenstein", title: "flag for Liechtenstein", dialCode: "+423" }, { code: "LK", emoji: "ðŸ‡±ðŸ‡°", unicode: "U+1F1F1 U+1F1F0", name: "Sri Lanka", title: "flag for Sri Lanka", dialCode: "+94" }, { code: "LR", emoji: "ðŸ‡±ðŸ‡·", unicode: "U+1F1F1 U+1F1F7", name: "Liberia", title: "flag for Liberia", dialCode: "+231" }, { code: "LS", emoji: "ðŸ‡±ðŸ‡¸", unicode: "U+1F1F1 U+1F1F8", name: "Lesotho", title: "flag for Lesotho", dialCode: "+266" }, { code: "LT", emoji: "ðŸ‡±ðŸ‡¹", unicode: "U+1F1F1 U+1F1F9", name: "Lithuania", title: "flag for Lithuania", dialCode: "+370" }, { code: "LU", emoji: "ðŸ‡±ðŸ‡º", unicode: "U+1F1F1 U+1F1FA", name: "Luxembourg", title: "flag for Luxembourg", dialCode: "+352" }, { code: "LV", emoji: "ðŸ‡±ðŸ‡»", unicode: "U+1F1F1 U+1F1FB", name: "Latvia", title: "flag for Latvia", dialCode: "+371" }, { code: "LY", emoji: "ðŸ‡±ðŸ‡¾", unicode: "U+1F1F1 U+1F1FE", name: "Libya", title: "flag for Libya", dialCode: "+218" }, { code: "MA", emoji: "ðŸ‡²ðŸ‡¦", unicode: "U+1F1F2 U+1F1E6", name: "Morocco", title: "flag for Morocco", dialCode: "+212" }, { code: "MC", emoji: "ðŸ‡²ðŸ‡¨", unicode: "U+1F1F2 U+1F1E8", name: "Monaco", title: "flag for Monaco", dialCode: "+377" }, { code: "MD", emoji: "ðŸ‡²ðŸ‡©", unicode: "U+1F1F2 U+1F1E9", name: "Moldova", title: "flag for Moldova", dialCode: "+373" }, { code: "ME", emoji: "ðŸ‡²ðŸ‡ª", unicode: "U+1F1F2 U+1F1EA", name: "Montenegro", title: "flag for Montenegro", dialCode: "+382" }, { code: "MF", emoji: "ðŸ‡²ðŸ‡«", unicode: "U+1F1F2 U+1F1EB", name: "Saint Martin (French Part)", title: "flag for Saint Martin (French Part)", dialCode: "+590" }, { code: "MG", emoji: "ðŸ‡²ðŸ‡¬", unicode: "U+1F1F2 U+1F1EC", name: "Madagascar", title: "flag for Madagascar", dialCode: "+261" }, { code: "MH", emoji: "ðŸ‡²ðŸ‡­", unicode: "U+1F1F2 U+1F1ED", name: "Marshall Islands", title: "flag for Marshall Islands", dialCode: "+692" }, { code: "MK", emoji: "ðŸ‡²ðŸ‡°", unicode: "U+1F1F2 U+1F1F0", name: "Macedonia", title: "flag for Macedonia", dialCode: "+389" }, { code: "ML", emoji: "ðŸ‡²ðŸ‡±", unicode: "U+1F1F2 U+1F1F1", name: "Mali", title: "flag for Mali", dialCode: "+223" }, { code: "MM", emoji: "ðŸ‡²ðŸ‡²", unicode: "U+1F1F2 U+1F1F2", name: "Myanmar", title: "flag for Myanmar", dialCode: "+95" }, { code: "MN", emoji: "ðŸ‡²ðŸ‡³", unicode: "U+1F1F2 U+1F1F3", name: "Mongolia", title: "flag for Mongolia", dialCode: "+976" }, { code: "MO", emoji: "ðŸ‡²ðŸ‡´", unicode: "U+1F1F2 U+1F1F4", name: "Macao", title: "flag for Macao", dialCode: "+853" }, { code: "MP", emoji: "ðŸ‡²ðŸ‡µ", unicode: "U+1F1F2 U+1F1F5", name: "Northern Mariana Islands", title: "flag for Northern Mariana Islands", dialCode: "+1 670" }, { code: "MQ", emoji: "ðŸ‡²ðŸ‡¶", unicode: "U+1F1F2 U+1F1F6", name: "Martinique", title: "flag for Martinique", dialCode: "+596" }, { code: "MR", emoji: "ðŸ‡²ðŸ‡·", unicode: "U+1F1F2 U+1F1F7", name: "Mauritania", title: "flag for Mauritania", dialCode: "+222" }, { code: "MS", emoji: "ðŸ‡²ðŸ‡¸", unicode: "U+1F1F2 U+1F1F8", name: "Montserrat", title: "flag for Montserrat", dialCode: "+1664" }, { code: "MT", emoji: "ðŸ‡²ðŸ‡¹", unicode: "U+1F1F2 U+1F1F9", name: "Malta", title: "flag for Malta", dialCode: "+356" }, { code: "MU", emoji: "ðŸ‡²ðŸ‡º", unicode: "U+1F1F2 U+1F1FA", name: "Mauritius", title: "flag for Mauritius", dialCode: "+230" }, { code: "MV", emoji: "ðŸ‡²ðŸ‡»", unicode: "U+1F1F2 U+1F1FB", name: "Maldives", title: "flag for Maldives", dialCode: "+960" }, { code: "MW", emoji: "ðŸ‡²ðŸ‡¼", unicode: "U+1F1F2 U+1F1FC", name: "Malawi", title: "flag for Malawi", dialCode: "+265" }, { code: "MX", emoji: "ðŸ‡²ðŸ‡½", unicode: "U+1F1F2 U+1F1FD", name: "Mexico", title: "flag for Mexico", dialCode: "+52" }, { code: "MY", emoji: "ðŸ‡²ðŸ‡¾", unicode: "U+1F1F2 U+1F1FE", name: "Malaysia", title: "flag for Malaysia", dialCode: "+60" }, { code: "MZ", emoji: "ðŸ‡²ðŸ‡¿", unicode: "U+1F1F2 U+1F1FF", name: "Mozambique", title: "flag for Mozambique", dialCode: "+258" }, { code: "NA", emoji: "ðŸ‡³ðŸ‡¦", unicode: "U+1F1F3 U+1F1E6", name: "Namibia", title: "flag for Namibia", dialCode: "+264" }, { code: "NC", emoji: "ðŸ‡³ðŸ‡¨", unicode: "U+1F1F3 U+1F1E8", name: "New Caledonia", title: "flag for New Caledonia", dialCode: "+687" }, { code: "NE", emoji: "ðŸ‡³ðŸ‡ª", unicode: "U+1F1F3 U+1F1EA", name: "Niger", title: "flag for Niger", dialCode: "+227" }, { code: "NF", emoji: "ðŸ‡³ðŸ‡«", unicode: "U+1F1F3 U+1F1EB", name: "Norfolk Island", title: "flag for Norfolk Island", dialCode: "+672" }, { code: "NG", emoji: "ðŸ‡³ðŸ‡¬", unicode: "U+1F1F3 U+1F1EC", name: "Nigeria", title: "flag for Nigeria", dialCode: "+234" }, { code: "NI", emoji: "ðŸ‡³ðŸ‡®", unicode: "U+1F1F3 U+1F1EE", name: "Nicaragua", title: "flag for Nicaragua", dialCode: "+505" }, { code: "NL", emoji: "ðŸ‡³ðŸ‡±", unicode: "U+1F1F3 U+1F1F1", name: "Netherlands", title: "flag for Netherlands", dialCode: "+31" }, { code: "NO", emoji: "ðŸ‡³ðŸ‡´", unicode: "U+1F1F3 U+1F1F4", name: "Norway", title: "flag for Norway", dialCode: "+47" }, { code: "NP", emoji: "ðŸ‡³ðŸ‡µ", unicode: "U+1F1F3 U+1F1F5", name: "Nepal", title: "flag for Nepal", dialCode: "+977" }, { code: "NR", emoji: "ðŸ‡³ðŸ‡·", unicode: "U+1F1F3 U+1F1F7", name: "Nauru", title: "flag for Nauru", dialCode: "+674" }, { code: "NU", emoji: "ðŸ‡³ðŸ‡º", unicode: "U+1F1F3 U+1F1FA", name: "Niue", title: "flag for Niue", dialCode: "+683" }, { code: "NZ", emoji: "ðŸ‡³ðŸ‡¿", unicode: "U+1F1F3 U+1F1FF", name: "New Zealand", title: "flag for New Zealand", dialCode: "+64" }, { code: "OM", emoji: "ðŸ‡´ðŸ‡²", unicode: "U+1F1F4 U+1F1F2", name: "Oman", title: "flag for Oman", dialCode: "+968" }, { code: "PA", emoji: "ðŸ‡µðŸ‡¦", unicode: "U+1F1F5 U+1F1E6", name: "Panama", title: "flag for Panama", dialCode: "+507" }, { code: "PE", emoji: "ðŸ‡µðŸ‡ª", unicode: "U+1F1F5 U+1F1EA", name: "Peru", title: "flag for Peru", dialCode: "+51" }, { code: "PF", emoji: "ðŸ‡µðŸ‡«", unicode: "U+1F1F5 U+1F1EB", name: "French Polynesia", title: "flag for French Polynesia", dialCode: "+689" }, { code: "PG", emoji: "ðŸ‡µðŸ‡¬", unicode: "U+1F1F5 U+1F1EC", name: "Papua New Guinea", title: "flag for Papua New Guinea", dialCode: "+675" }, { code: "PH", emoji: "ðŸ‡µðŸ‡­", unicode: "U+1F1F5 U+1F1ED", name: "Philippines", title: "flag for Philippines", dialCode: "+63" }, { code: "PK", emoji: "ðŸ‡µðŸ‡°", unicode: "U+1F1F5 U+1F1F0", name: "Pakistan", title: "flag for Pakistan", dialCode: "+92" }, { code: "PL", emoji: "ðŸ‡µðŸ‡±", unicode: "U+1F1F5 U+1F1F1", name: "Poland", title: "flag for Poland", dialCode: "+48" }, { code: "PM", emoji: "ðŸ‡µðŸ‡²", unicode: "U+1F1F5 U+1F1F2", name: "Saint Pierre and Miquelon", title: "flag for Saint Pierre and Miquelon", dialCode: "+508" }, { code: "PN", emoji: "ðŸ‡µðŸ‡³", unicode: "U+1F1F5 U+1F1F3", name: "Pitcairn", title: "flag for Pitcairn", dialCode: "+872" }, { code: "PR", emoji: "ðŸ‡µðŸ‡·", unicode: "U+1F1F5 U+1F1F7", name: "Puerto Rico", title: "flag for Puerto Rico", dialCode: "+1 939" }, { code: "PS", emoji: "ðŸ‡µðŸ‡¸", unicode: "U+1F1F5 U+1F1F8", name: "Palestinian Territory", title: "flag for Palestinian Territory", dialCode: "+970" }, { code: "PT", emoji: "ðŸ‡µðŸ‡¹", unicode: "U+1F1F5 U+1F1F9", name: "Portugal", title: "flag for Portugal", dialCode: "+351" }, { code: "PW", emoji: "ðŸ‡µðŸ‡¼", unicode: "U+1F1F5 U+1F1FC", name: "Palau", title: "flag for Palau", dialCode: "+680" }, { code: "PY", emoji: "ðŸ‡µðŸ‡¾", unicode: "U+1F1F5 U+1F1FE", name: "Paraguay", title: "flag for Paraguay", dialCode: "+595" }, { code: "QA", emoji: "ðŸ‡¶ðŸ‡¦", unicode: "U+1F1F6 U+1F1E6", name: "Qatar", title: "flag for Qatar", dialCode: "+974" }, { code: "RE", emoji: "ðŸ‡·ðŸ‡ª", unicode: "U+1F1F7 U+1F1EA", name: "RÃ©union", title: "flag for RÃ©union", dialCode: "+262" }, { code: "RO", emoji: "ðŸ‡·ðŸ‡´", unicode: "U+1F1F7 U+1F1F4", name: "Romania", title: "flag for Romania", dialCode: "+40" }, { code: "RS", emoji: "ðŸ‡·ðŸ‡¸", unicode: "U+1F1F7 U+1F1F8", name: "Serbia", title: "flag for Serbia", dialCode: "+381" }, { code: "RU", emoji: "ðŸ‡·ðŸ‡º", unicode: "U+1F1F7 U+1F1FA", name: "Russia", title: "flag for Russia", dialCode: "+7" }, { code: "RW", emoji: "ðŸ‡·ðŸ‡¼", unicode: "U+1F1F7 U+1F1FC", name: "Rwanda", title: "flag for Rwanda", dialCode: "+250" }, { code: "SA", emoji: "ðŸ‡¸ðŸ‡¦", unicode: "U+1F1F8 U+1F1E6", name: "Saudi Arabia", title: "flag for Saudi Arabia", dialCode: "+966" }, { code: "SB", emoji: "ðŸ‡¸ðŸ‡§", unicode: "U+1F1F8 U+1F1E7", name: "Solomon Islands", title: "flag for Solomon Islands", dialCode: "+677" }, { code: "SC", emoji: "ðŸ‡¸ðŸ‡¨", unicode: "U+1F1F8 U+1F1E8", name: "Seychelles", title: "flag for Seychelles", dialCode: "+248" }, { code: "SD", emoji: "ðŸ‡¸ðŸ‡©", unicode: "U+1F1F8 U+1F1E9", name: "Sudan", title: "flag for Sudan", dialCode: "+249" }, { code: "SE", emoji: "ðŸ‡¸ðŸ‡ª", unicode: "U+1F1F8 U+1F1EA", name: "Sweden", title: "flag for Sweden", dialCode: "+46" }, { code: "SG", emoji: "ðŸ‡¸ðŸ‡¬", unicode: "U+1F1F8 U+1F1EC", name: "Singapore", title: "flag for Singapore", dialCode: "+65" }, { code: "SH", emoji: "ðŸ‡¸ðŸ‡­", unicode: "U+1F1F8 U+1F1ED", name: "Saint Helena, Ascension and Tristan Da Cunha", title: "flag for Saint Helena, Ascension and Tristan Da Cunha", dialCode: "+290" }, { code: "SI", emoji: "ðŸ‡¸ðŸ‡®", unicode: "U+1F1F8 U+1F1EE", name: "Slovenia", title: "flag for Slovenia", dialCode: "+386" }, { code: "SJ", emoji: "ðŸ‡¸ðŸ‡¯", unicode: "U+1F1F8 U+1F1EF", name: "Svalbard and Jan Mayen", title: "flag for Svalbard and Jan Mayen", dialCode: "+47" }, { code: "SK", emoji: "ðŸ‡¸ðŸ‡°", unicode: "U+1F1F8 U+1F1F0", name: "Slovakia", title: "flag for Slovakia", dialCode: "+421" }, { code: "SL", emoji: "ðŸ‡¸ðŸ‡±", unicode: "U+1F1F8 U+1F1F1", name: "Sierra Leone", title: "flag for Sierra Leone", dialCode: "+232" }, { code: "SM", emoji: "ðŸ‡¸ðŸ‡²", unicode: "U+1F1F8 U+1F1F2", name: "San Marino", title: "flag for San Marino", dialCode: "+378" }, { code: "SN", emoji: "ðŸ‡¸ðŸ‡³", unicode: "U+1F1F8 U+1F1F3", name: "Senegal", title: "flag for Senegal", dialCode: "+221" }, { code: "SO", emoji: "ðŸ‡¸ðŸ‡´", unicode: "U+1F1F8 U+1F1F4", name: "Somalia", title: "flag for Somalia", dialCode: "+252" }, { code: "SR", emoji: "ðŸ‡¸ðŸ‡·", unicode: "U+1F1F8 U+1F1F7", name: "Suriname", title: "flag for Suriname", dialCode: "+597" }, { code: "SS", emoji: "ðŸ‡¸ðŸ‡¸", unicode: "U+1F1F8 U+1F1F8", name: "South Sudan", title: "flag for South Sudan" }, { code: "ST", emoji: "ðŸ‡¸ðŸ‡¹", unicode: "U+1F1F8 U+1F1F9", name: "Sao Tome and Principe", title: "flag for Sao Tome and Principe", dialCode: "+239" }, { code: "SV", emoji: "ðŸ‡¸ðŸ‡»", unicode: "U+1F1F8 U+1F1FB", name: "El Salvador", title: "flag for El Salvador", dialCode: "+503" }, { code: "SX", emoji: "ðŸ‡¸ðŸ‡½", unicode: "U+1F1F8 U+1F1FD", name: "Sint Maarten (Dutch Part)", title: "flag for Sint Maarten (Dutch Part)" }, { code: "SY", emoji: "ðŸ‡¸ðŸ‡¾", unicode: "U+1F1F8 U+1F1FE", name: "Syrian Arab Republic", title: "flag for Syrian Arab Republic", dialCode: "+963" }, { code: "SZ", emoji: "ðŸ‡¸ðŸ‡¿", unicode: "U+1F1F8 U+1F1FF", name: "Swaziland", title: "flag for Swaziland", dialCode: "+268" }, { code: "TC", emoji: "ðŸ‡¹ðŸ‡¨", unicode: "U+1F1F9 U+1F1E8", name: "Turks and Caicos Islands", title: "flag for Turks and Caicos Islands", dialCode: "+1 649" }, { code: "TD", emoji: "ðŸ‡¹ðŸ‡©", unicode: "U+1F1F9 U+1F1E9", name: "Chad", title: "flag for Chad", dialCode: "+235" }, { code: "TF", emoji: "ðŸ‡¹ðŸ‡«", unicode: "U+1F1F9 U+1F1EB", name: "French Southern Territories", title: "flag for French Southern Territories" }, { code: "TG", emoji: "ðŸ‡¹ðŸ‡¬", unicode: "U+1F1F9 U+1F1EC", name: "Togo", title: "flag for Togo", dialCode: "+228" }, { code: "TH", emoji: "ðŸ‡¹ðŸ‡­", unicode: "U+1F1F9 U+1F1ED", name: "Thailand", title: "flag for Thailand", dialCode: "+66" }, { code: "TJ", emoji: "ðŸ‡¹ðŸ‡¯", unicode: "U+1F1F9 U+1F1EF", name: "Tajikistan", title: "flag for Tajikistan", dialCode: "+992" }, { code: "TK", emoji: "ðŸ‡¹ðŸ‡°", unicode: "U+1F1F9 U+1F1F0", name: "Tokelau", title: "flag for Tokelau", dialCode: "+690" }, { code: "TL", emoji: "ðŸ‡¹ðŸ‡±", unicode: "U+1F1F9 U+1F1F1", name: "Timor-Leste", title: "flag for Timor-Leste", dialCode: "+670" }, { code: "TM", emoji: "ðŸ‡¹ðŸ‡²", unicode: "U+1F1F9 U+1F1F2", name: "Turkmenistan", title: "flag for Turkmenistan", dialCode: "+993" }, { code: "TN", emoji: "ðŸ‡¹ðŸ‡³", unicode: "U+1F1F9 U+1F1F3", name: "Tunisia", title: "flag for Tunisia", dialCode: "+216" }, { code: "TO", emoji: "ðŸ‡¹ðŸ‡´", unicode: "U+1F1F9 U+1F1F4", name: "Tonga", title: "flag for Tonga", dialCode: "+676" }, { code: "TR", emoji: "ðŸ‡¹ðŸ‡·", unicode: "U+1F1F9 U+1F1F7", name: "Turkey", title: "flag for Turkey", dialCode: "+90" }, { code: "TT", emoji: "ðŸ‡¹ðŸ‡¹", unicode: "U+1F1F9 U+1F1F9", name: "Trinidad and Tobago", title: "flag for Trinidad and Tobago", dialCode: "+1 868" }, { code: "TV", emoji: "ðŸ‡¹ðŸ‡»", unicode: "U+1F1F9 U+1F1FB", name: "Tuvalu", title: "flag for Tuvalu", dialCode: "+688" }, { code: "TW", emoji: "ðŸ‡¹ðŸ‡¼", unicode: "U+1F1F9 U+1F1FC", name: "Taiwan", title: "flag for Taiwan", dialCode: "+886" }, { code: "TZ", emoji: "ðŸ‡¹ðŸ‡¿", unicode: "U+1F1F9 U+1F1FF", name: "Tanzania", title: "flag for Tanzania", dialCode: "+255" }, { code: "UA", emoji: "ðŸ‡ºðŸ‡¦", unicode: "U+1F1FA U+1F1E6", name: "Ukraine", title: "flag for Ukraine", dialCode: "+380" }, { code: "UG", emoji: "ðŸ‡ºðŸ‡¬", unicode: "U+1F1FA U+1F1EC", name: "Uganda", title: "flag for Uganda", dialCode: "+256" }, { code: "UM", emoji: "ðŸ‡ºðŸ‡²", unicode: "U+1F1FA U+1F1F2", name: "United States Minor Outlying Islands", title: "flag for United States Minor Outlying Islands" }, { code: "US", emoji: "ðŸ‡ºðŸ‡¸", unicode: "U+1F1FA U+1F1F8", name: "United States", title: "flag for United States", dialCode: "+1" }, { code: "UY", emoji: "ðŸ‡ºðŸ‡¾", unicode: "U+1F1FA U+1F1FE", name: "Uruguay", title: "flag for Uruguay", dialCode: "+598" }, { code: "UZ", emoji: "ðŸ‡ºðŸ‡¿", unicode: "U+1F1FA U+1F1FF", name: "Uzbekistan", title: "flag for Uzbekistan", dialCode: "+998" }, { code: "VA", emoji: "ðŸ‡»ðŸ‡¦", unicode: "U+1F1FB U+1F1E6", name: "Vatican City", title: "flag for Vatican City", dialCode: "+379" }, { code: "VC", emoji: "ðŸ‡»ðŸ‡¨", unicode: "U+1F1FB U+1F1E8", name: "Saint Vincent and The Grenadines", title: "flag for Saint Vincent and The Grenadines", dialCode: "+1 784" }, { code: "VE", emoji: "ðŸ‡»ðŸ‡ª", unicode: "U+1F1FB U+1F1EA", name: "Venezuela", title: "flag for Venezuela", dialCode: "+58" }, { code: "VG", emoji: "ðŸ‡»ðŸ‡¬", unicode: "U+1F1FB U+1F1EC", name: "Virgin Islands, British", title: "flag for Virgin Islands, British", dialCode: "+1 284" }, { code: "VI", emoji: "ðŸ‡»ðŸ‡®", unicode: "U+1F1FB U+1F1EE", name: "Virgin Islands, U.S.", title: "flag for Virgin Islands, U.S.", dialCode: "+1 340" }, { code: "VN", emoji: "ðŸ‡»ðŸ‡³", unicode: "U+1F1FB U+1F1F3", name: "Viet Nam", title: "flag for Viet Nam", dialCode: "+84" }, { code: "VU", emoji: "ðŸ‡»ðŸ‡º", unicode: "U+1F1FB U+1F1FA", name: "Vanuatu", title: "flag for Vanuatu", dialCode: "+678" }, { code: "WF", emoji: "ðŸ‡¼ðŸ‡«", unicode: "U+1F1FC U+1F1EB", name: "Wallis and Futuna", title: "flag for Wallis and Futuna", dialCode: "+681" }, { code: "WS", emoji: "ðŸ‡¼ðŸ‡¸", unicode: "U+1F1FC U+1F1F8", name: "Samoa", title: "flag for Samoa", dialCode: "+685" }, { code: "XK", emoji: "ðŸ‡½ðŸ‡°", unicode: "U+1F1FD U+1F1F0", name: "Kosovo", title: "flag for Kosovo", dialCode: "+383" }, { code: "YE", emoji: "ðŸ‡¾ðŸ‡ª", unicode: "U+1F1FE U+1F1EA", name: "Yemen", title: "flag for Yemen", dialCode: "+967" }, { code: "YT", emoji: "ðŸ‡¾ðŸ‡¹", unicode: "U+1F1FE U+1F1F9", name: "Mayotte", title: "flag for Mayotte", dialCode: "+262" }, { code: "ZA", emoji: "ðŸ‡¿ðŸ‡¦", unicode: "U+1F1FF U+1F1E6", name: "South Africa", title: "flag for South Africa", dialCode: "+27" }, { code: "ZM", emoji: "ðŸ‡¿ðŸ‡²", unicode: "U+1F1FF U+1F1F2", name: "Zambia", title: "flag for Zambia", dialCode: "+260" }, { code: "ZW", emoji: "ðŸ‡¿ðŸ‡¼", unicode: "U+1F1FF U+1F1FC", name: "Zimbabwe", title: "flag for Zimbabwe", dialCode: "+263" }];
var i = class {
  constructor(e2, i2, o) {
    __publicField(this, "container");
    __publicField(this, "apiKey");
    __publicField(this, "inputElement");
    __publicField(this, "inputClearButton");
    __publicField(this, "autocompleteItemsElement", null);
    __publicField(this, "focusedItemIndex");
    __publicField(this, "currentItems");
    __publicField(this, "currentPromiseReject");
    __publicField(this, "currentPlaceDetailsPromiseReject");
    __publicField(this, "currentTimeout");
    __publicField(this, "changeCallbacks", []);
    __publicField(this, "suggestionsChangeCallbacks", []);
    __publicField(this, "inputCallbacks", []);
    __publicField(this, "openCallbacks", []);
    __publicField(this, "closeCallbacks", []);
    __publicField(this, "preprocessHook");
    __publicField(this, "postprocessHook");
    __publicField(this, "suggestionsFilter");
    __publicField(this, "sendGeocoderRequestAlt");
    __publicField(this, "sendPlaceDetailsRequestAlt");
    __publicField(this, "geocoderUrl", "https://api.geoapify.com/v1/geocode/autocomplete");
    __publicField(this, "placeDetailsUrl", "https://api.geoapify.com/v2/place-details");
    __publicField(this, "options", { limit: 5, debounceDelay: 100 });
    __publicField(this, "BY_COUNTRYCODE", "countrycode");
    __publicField(this, "BY_RECT", "rect");
    __publicField(this, "BY_CIRCLE", "circle");
    __publicField(this, "BY_PROXIMITY", "proximity");
    __publicField(this, "BY_PLACE", "place");
    this.container = e2, this.apiKey = i2, this.options = o ? { ...this.options, ...o } : this.options, this.options.filter = this.options.filter || {}, this.options.bias = this.options.bias || {}, this.options.countryCodes && this.addFilterByCountry(this.options.countryCodes), this.options.position && this.addBiasByProximity(this.options.position), this.inputElement = document.createElement("input"), this.inputElement.classList.add("geoapify-autocomplete-input"), this.inputElement.setAttribute("type", "text"), this.inputElement.setAttribute("placeholder", this.options.placeholder || "Enter an address here"), this.container.appendChild(this.inputElement), this.inputClearButton = document.createElement("div"), this.inputClearButton.classList.add("geoapify-close-button"), this.addIcon(this.inputClearButton, "close"), this.inputClearButton.addEventListener("click", this.clearFieldAndNotify.bind(this), false), this.container.appendChild(this.inputClearButton), this.inputElement.addEventListener("input", this.onUserInput.bind(this), false), this.inputElement.addEventListener("keydown", this.onUserKeyPress.bind(this), false), document.addEventListener("click", (e3) => {
      e3.target !== this.inputElement ? this.closeDropDownList() : this.autocompleteItemsElement || this.openDropdownAgain();
    });
  }
  setType(e2) {
    this.options.type = e2;
  }
  setLang(e2) {
    this.options.lang = e2;
  }
  setCountryCodes(e2) {
    console.warn("WARNING! Obsolete function called. Function setCountryCodes() has been deprecated, please use the new addFilterByCountry() function instead!"), this.options.countryCodes = e2;
  }
  setPosition(e2) {
    console.warn("WARNING! Obsolete function called. Function setPosition() has been deprecated, please use the new addBiasByProximity() function instead!"), this.options.position = e2;
  }
  setLimit(e2) {
    this.options.limit = e2;
  }
  setValue(e2) {
    e2 ? this.inputClearButton.classList.add("visible") : this.inputClearButton.classList.remove("visible"), this.inputElement.value = e2;
  }
  getValue() {
    return this.inputElement.value;
  }
  addFilterByCountry(e2) {
    this.options.filter[this.BY_COUNTRYCODE] = e2;
  }
  addFilterByCircle(e2) {
    this.options.filter[this.BY_CIRCLE] = e2;
  }
  addFilterByRect(e2) {
    this.options.filter[this.BY_RECT] = e2;
  }
  addFilterByPlace(e2) {
    this.options.filter[this.BY_PLACE] = e2;
  }
  clearFilters() {
    this.options.filter = {};
  }
  addBiasByCountry(e2) {
    this.options.bias[this.BY_COUNTRYCODE] = e2;
  }
  addBiasByCircle(e2) {
    this.options.bias[this.BY_CIRCLE] = e2;
  }
  addBiasByRect(e2) {
    this.options.bias[this.BY_RECT] = e2;
  }
  addBiasByProximity(e2) {
    this.options.bias[this.BY_PROXIMITY] = e2;
  }
  clearBias() {
    this.options.bias = {};
  }
  on(e2, i2) {
    "select" === e2 && this.changeCallbacks.indexOf(i2) < 0 && this.changeCallbacks.push(i2), "suggestions" === e2 && this.suggestionsChangeCallbacks.indexOf(i2) < 0 && this.suggestionsChangeCallbacks.push(i2), "input" === e2 && this.inputCallbacks.indexOf(i2) < 0 && this.inputCallbacks.push(i2), "close" === e2 && this.closeCallbacks.indexOf(i2) < 0 && this.closeCallbacks.push(i2), "open" === e2 && this.openCallbacks.indexOf(i2) < 0 && this.openCallbacks.push(i2);
  }
  off(e2, i2) {
    "select" === e2 && this.changeCallbacks.indexOf(i2) >= 0 ? this.changeCallbacks.splice(this.changeCallbacks.indexOf(i2), 1) : "select" !== e2 || i2 || (this.changeCallbacks = []), "suggestions" === e2 && this.suggestionsChangeCallbacks.indexOf(i2) >= 0 ? this.suggestionsChangeCallbacks.splice(this.suggestionsChangeCallbacks.indexOf(i2), 1) : "suggestions" !== e2 || i2 || (this.suggestionsChangeCallbacks = []), "input" === e2 && this.inputCallbacks.indexOf(i2) >= 0 ? this.inputCallbacks.splice(this.inputCallbacks.indexOf(i2), 1) : "input" !== e2 || i2 || (this.inputCallbacks = []), "close" === e2 && this.closeCallbacks.indexOf(i2) >= 0 ? this.closeCallbacks.splice(this.closeCallbacks.indexOf(i2), 1) : "close" !== e2 || i2 || (this.closeCallbacks = []), "open" === e2 && this.openCallbacks.indexOf(i2) >= 0 ? this.openCallbacks.splice(this.openCallbacks.indexOf(i2), 1) : "open" !== e2 || i2 || (this.openCallbacks = []);
  }
  once(e2, i2) {
    this.on(e2, i2);
    const o = this, a = () => {
      o.off(e2, i2), o.off(e2, a);
    };
    this.on(e2, a);
  }
  setSuggestionsFilter(e2) {
    this.suggestionsFilter = e2 && "function" == typeof e2 ? e2 : null;
  }
  setPreprocessHook(e2) {
    this.preprocessHook = e2 && "function" == typeof e2 ? e2 : null;
  }
  setPostprocessHook(e2) {
    this.postprocessHook = e2 && "function" == typeof e2 ? e2 : null;
  }
  setSendGeocoderRequestFunc(e2) {
    this.sendGeocoderRequestAlt = e2 && "function" == typeof e2 ? e2 : null;
  }
  setSendPlaceDetailsRequestFunc(e2) {
    this.sendPlaceDetailsRequestAlt = e2 && "function" == typeof e2 ? e2 : null;
  }
  isOpen() {
    return !!this.autocompleteItemsElement;
  }
  close() {
    this.closeDropDownList();
  }
  open() {
    this.isOpen() || this.openDropdownAgain();
  }
  sendGeocoderRequest(e2) {
    return new Promise((i2, o) => {
      this.currentPromiseReject = o;
      let a = this.generateUrl(e2);
      fetch(a).then((e3) => {
        e3.ok ? e3.json().then((e4) => i2(e4)) : e3.json().then((e4) => o(e4));
      });
    });
  }
  sendPlaceDetailsRequest(e2) {
    return new Promise((i2, o) => {
      var _a;
      if ("openstreetmap" !== ((_a = e2.properties.datasource) == null ? void 0 : _a.sourcename) || !e2.properties.place_id)
        return void i2(e2);
      this.currentPlaceDetailsPromiseReject = o;
      let a = this.generatePlacesUrlUrl(e2.properties.place_id);
      fetch(a).then((a2) => {
        a2.ok ? a2.json().then((o2) => {
          o2.features.length || i2(e2), i2(o2.features[0]);
        }) : a2.json().then((e3) => o(e3));
      });
    });
  }
  onUserInput(e2) {
    let i2 = this.inputElement.value, o = this.inputElement.value;
    if (this.inputCallbacks.forEach((e3) => e3(i2)), this.closeDropDownList(), this.focusedItemIndex = -1, this.currentPromiseReject && (this.currentPromiseReject({ canceled: true }), this.currentPromiseReject = null), this.currentTimeout && (window.clearTimeout(this.currentTimeout), this.currentTimeout = null), !i2)
      return this.inputClearButton.classList.remove("visible"), false;
    this.inputClearButton.classList.add("visible"), this.currentTimeout = window.setTimeout(() => {
      let a;
      this.preprocessHook && "function" == typeof this.preprocessHook && (i2 = this.preprocessHook(i2)), a = this.sendGeocoderRequestAlt ? this.sendGeocoderRequestAlt(i2, this) : this.sendGeocoderRequest(i2), a.then((i3) => {
        var _a, _b;
        i3.features && i3.features.length && ((_a = i3 == null ? void 0 : i3.query) == null ? void 0 : _a.parsed) && (this.options.allowNonVerifiedHouseNumber || this.options.allowNonVerifiedStreet) && this.extendByNonVerifiedValues(i3.features, (_b = i3 == null ? void 0 : i3.query) == null ? void 0 : _b.parsed), this.currentItems = i3.features, this.currentItems && this.currentItems.length && this.suggestionsFilter && "function" == typeof this.suggestionsFilter && (this.currentItems = this.suggestionsFilter(this.currentItems)), this.notifySuggestions(this.currentItems), this.currentItems.length && (this.autocompleteItemsElement = document.createElement("div"), this.autocompleteItemsElement.setAttribute("class", "geoapify-autocomplete-items"), this.notifyOpened(), this.container.appendChild(this.autocompleteItemsElement), this.currentItems.forEach((i4, a2) => {
          const t = document.createElement("div");
          if (t.classList.add("geoapify-autocomplete-item"), !this.options.skipIcons) {
            const e3 = document.createElement("span");
            e3.classList.add("icon"), this.addFeatureIcon(e3, i4.properties.result_type, i4.properties.country_code), t.appendChild(e3);
          }
          const n = document.createElement("span");
          if (n.classList.add("address"), this.postprocessHook && "function" == typeof this.postprocessHook) {
            const e3 = this.postprocessHook(i4);
            n.innerHTML = this.getStyledAddressSingleValue(e3, o);
          } else
            n.innerHTML = this.getStyledAddress(i4.properties, o);
          t.appendChild(n), t.addEventListener("click", (i5) => {
            e2.stopPropagation(), this.setValueAndNotify(this.currentItems[a2]);
          }), this.autocompleteItemsElement.appendChild(t);
        }));
      }, (e3) => {
        e3.canceled || console.log(e3);
      });
    }, this.options.debounceDelay);
  }
  addHouseNumberToFormatted(e2, i2, o) {
    const a = { "{{{road}}} {{{house_number}}}": ["af", "ai", "al", "ao", "ar", "at", "aw", "ax", "ba", "be", "bg", "bi", "bo", "bq", "br", "bs", "bt", "bv", "bw", "cf", "ch", "cl", "cm", "co", "cr", "cu", "cv", "cw", "cy", "cz", "de", "dk", "do", "ec", "ee", "eh", "er", "et", "fi", "fo", "gd", "ge", "gl", "gq", "gr", "gt", "gw", "hn", "hr", "ht", "hu", "id", "il", "ir", "is", "jo", "ki", "km", "kp", "kw", "lc", "li", "lr", "lt", "lv", "ly", "me", "mk", "ml", "mn", "mo", "mx", "ni", "nl", "no", "np", "pa", "pe", "pl", "ps", "pt", "pw", "py", "qa", "ro", "rs", "ru", "sb", "sd", "se", "si", "sj", "sk", "so", "sr", "ss", "st", "sv", "sx", "sz", "td", "tj", "tl", "tr", "um", "uz", "uy", "vc", "ve", "vu", "ws"], "{{{house_number}}} {{{road}}}": ["ad", "ae", "ag", "am", "as", "au", "az", "bb", "bd", "bf", "bh", "bl", "bm", "bz", "ca", "cc", "ci", "ck", "cn", "cx", "dj", "dm", "dz", "eg", "fj", "fk", "fm", "fr", "ga", "gb", "gf", "gg", "gh", "gi", "gm", "gn", "gp", "gs", "gu", "gy", "hk", "hm", "ie", "im", "io", "iq", "je", "jm", "jp", "ke", "kh", "kn", "kr", "ky", "lb", "lk", "ls", "lu", "ma", "mc", "mf", "mh", "mg", "mm", "mp", "ms", "mt", "mq", "mv", "mw", "my", "na", "nc", "ne", "nf", "ng", "nr", "nu", "nz", "om", "pf", "pg", "ph", "pk", "pm", "pr", "re", "rw", "sa", "sc", "sg", "sh", "sl", "sn", "tc", "tf", "th", "tk", "tn", "to", "tt", "tv", "tw", "tz", "ug", "us", "vg", "vi", "wf", "yt", "za", "zm", "zw"], "{{{road}}}, {{{house_number}}}": ["by", "es", "it", "kg", "kz", "md", "mz", "sm", "sy", "ua", "va"], "{{{house_number}}}, {{{road}}}": ["bj", "bn", "cd", "cg", "in", "la", "mr", "mu", "tg", "tm", "vn", "ye"] }, t = Object.keys(a).find((i3) => a[i3].indexOf(e2.country_code) >= 0) || "{{{road}}} {{{house_number}}}";
    if (i2) {
      e2.street = i2.replace(/(^\w|\s\w|[-]\w)/g, (e3) => e3.toUpperCase()), e2.housenumber = o;
      const a2 = t.replace("{{{road}}}", e2.street).replace("{{{house_number}}}", o);
      e2.address_line1 = a2, e2.address_line2 = e2.formatted, e2.formatted = a2 + ", " + e2.formatted;
    } else {
      e2.housenumber = o;
      const i3 = t.replace("{{{road}}}", e2.street).replace("{{{house_number}}}", o);
      e2.address_line1 = e2.address_line1.replace(e2.street, i3), e2.formatted = e2.formatted.replace(e2.street, i3);
    }
  }
  extendByNonVerifiedValues(e2, i2) {
    e2.forEach((e3) => {
      i2.housenumber && this.options.allowNonVerifiedHouseNumber && "match_by_street" === e3.properties.rank.match_type ? (this.addHouseNumberToFormatted(e3.properties, null, i2.housenumber), e3.properties.nonVerifiedParts = ["housenumber"]) : i2.street && i2.housenumber && this.options.allowNonVerifiedStreet && ("match_by_city_or_disrict" === e3.properties.rank.match_type || "match_by_postcode" === e3.properties.rank.match_type) ? (this.addHouseNumberToFormatted(e3.properties, i2.street, i2.housenumber), e3.properties.nonVerifiedParts = ["housenumber", "street"]) : i2.street && this.options.allowNonVerifiedStreet && ("match_by_city_or_disrict" === e3.properties.rank.match_type || "match_by_postcode" === e3.properties.rank.match_type) && (e3.properties.street = i2.street.replace(/(^\w|\s\w|[-]\w)/g, (e4) => e4.toUpperCase()), e3.properties.address_line1 = e3.properties.street, e3.properties.address_line2 = e3.properties.formatted, e3.properties.formatted = e3.properties.street + ", " + e3.properties.formatted, e3.properties.nonVerifiedParts = ["street"]);
    });
  }
  getStyledAddressSingleValue(e2, i2) {
    let o = e2;
    const a = (o || "").toLowerCase().indexOf(i2.toLowerCase());
    return a >= 0 && (o = o.substring(0, a) + `<strong>${o.substring(a, a + i2.length)}</strong>` + o.substring(a + i2.length)), `<span class="main-part">${o}</span>`;
  }
  getStyledAddress(e2, i2) {
    let o, a;
    const t = e2.formatted.split(",").map((e3) => e3.trim());
    if (e2.name)
      o = t[0], a = t.slice(1).join(", ");
    else {
      const e3 = Math.min(2, Math.max(t.length - 2, 1));
      o = t.slice(0, e3).join(", "), a = t.slice(e3).join(", ");
    }
    if (e2.nonVerifiedParts && e2.nonVerifiedParts.length)
      e2.nonVerifiedParts.forEach((i3) => {
        o = o.replace(e2[i3], `<span class="non-verified">${e2[i3]}</span>`);
      });
    else {
      const e3 = o.toLowerCase().indexOf(i2.toLowerCase());
      e3 >= 0 && (o = o.substring(0, e3) + `<strong>${o.substring(e3, e3 + i2.length)}</strong>` + o.substring(e3 + i2.length));
    }
    return `<span class="main-part">${o}</span><span class="secondary-part">${a}</span>`;
  }
  onUserKeyPress(e2) {
    if (this.autocompleteItemsElement) {
      const i2 = this.autocompleteItemsElement.getElementsByTagName("div");
      "ArrowDown" === e2.code ? (e2.preventDefault(), this.focusedItemIndex++, this.focusedItemIndex >= i2.length && (this.focusedItemIndex = 0), this.setActive(i2, this.focusedItemIndex)) : "ArrowUp" === e2.code ? (e2.preventDefault(), this.focusedItemIndex--, this.focusedItemIndex < 0 && (this.focusedItemIndex = i2.length - 1), this.setActive(i2, this.focusedItemIndex)) : "Enter" === e2.code ? (e2.preventDefault(), this.focusedItemIndex > -1 && (this.options.skipSelectionOnArrowKey ? this.setValueAndNotify(this.currentItems[this.focusedItemIndex]) : this.closeDropDownList())) : "Escape" === e2.code && this.closeDropDownList();
    } else
      "ArrowDown" == e2.code && this.openDropdownAgain();
  }
  setActive(e2, i2) {
    if (!e2 || !e2.length)
      return false;
    for (var o = 0; o < e2.length; o++)
      e2[o].classList.remove("active");
    e2[i2].classList.add("active"), this.options.skipSelectionOnArrowKey || (this.inputElement.value = this.postprocessHook && "function" == typeof this.postprocessHook ? this.postprocessHook(this.currentItems[i2]) : this.currentItems[i2].properties.formatted, this.notifyValueSelected(this.currentItems[i2]));
  }
  setValueAndNotify(e2) {
    this.inputElement.value = this.postprocessHook && "function" == typeof this.postprocessHook ? this.postprocessHook(e2) : e2.properties.formatted, this.notifyValueSelected(e2), this.closeDropDownList();
  }
  clearFieldAndNotify(e2) {
    e2.stopPropagation(), this.inputElement.value = "", this.inputClearButton.classList.remove("visible"), this.currentPromiseReject && (this.currentPromiseReject({ canceled: true }), this.currentPromiseReject = null), this.currentTimeout && (window.clearTimeout(this.currentTimeout), this.currentTimeout = null), this.closeDropDownList(), this.notifyValueSelected(null);
  }
  closeDropDownList() {
    this.autocompleteItemsElement && (this.container.removeChild(this.autocompleteItemsElement), this.autocompleteItemsElement = null, this.notifyClosed());
  }
  addIcon(e2, i2) {
    const o = { close: { path: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z", viewbox: "0 0 24 24" }, "map-marker": { path: "M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0zM192 272c44.183 0 80-35.817 80-80s-35.817-80-80-80-80 35.817-80 80 35.817 80 80 80z", viewbox: "0 0 384 512" }, road: { path: "M573.19 402.67l-139.79-320C428.43 71.29 417.6 64 405.68 64h-97.59l2.45 23.16c.5 4.72-3.21 8.84-7.96 8.84h-29.16c-4.75 0-8.46-4.12-7.96-8.84L267.91 64h-97.59c-11.93 0-22.76 7.29-27.73 18.67L2.8 402.67C-6.45 423.86 8.31 448 30.54 448h196.84l10.31-97.68c.86-8.14 7.72-14.32 15.91-14.32h68.8c8.19 0 15.05 6.18 15.91 14.32L348.62 448h196.84c22.23 0 36.99-24.14 27.73-45.33zM260.4 135.16a8 8 0 0 1 7.96-7.16h39.29c4.09 0 7.53 3.09 7.96 7.16l4.6 43.58c.75 7.09-4.81 13.26-11.93 13.26h-40.54c-7.13 0-12.68-6.17-11.93-13.26l4.59-43.58zM315.64 304h-55.29c-9.5 0-16.91-8.23-15.91-17.68l5.07-48c.86-8.14 7.72-14.32 15.91-14.32h45.15c8.19 0 15.05 6.18 15.91 14.32l5.07 48c1 9.45-6.41 17.68-15.91 17.68z", viewbox: "0 0 576 512" }, city: { path: "M616 192H480V24c0-13.26-10.74-24-24-24H312c-13.26 0-24 10.74-24 24v72h-64V16c0-8.84-7.16-16-16-16h-16c-8.84 0-16 7.16-16 16v80h-64V16c0-8.84-7.16-16-16-16H80c-8.84 0-16 7.16-16 16v80H24c-13.26 0-24 10.74-24 24v360c0 17.67 14.33 32 32 32h576c17.67 0 32-14.33 32-32V216c0-13.26-10.75-24-24-24zM128 404c0 6.63-5.37 12-12 12H76c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12H76c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12H76c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm128 192c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm160 96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12V76c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm160 288c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40zm0-96c0 6.63-5.37 12-12 12h-40c-6.63 0-12-5.37-12-12v-40c0-6.63 5.37-12 12-12h40c6.63 0 12 5.37 12 12v40z", viewbox: "0 0 640 512" } };
    var a = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    a.setAttribute("viewBox", o[i2].viewbox), a.setAttribute("height", "24");
    var t = document.createElementNS("http://www.w3.org/2000/svg", "path");
    t.setAttribute("d", o[i2].path), t.setAttribute("fill", "currentColor"), a.appendChild(t), e2.appendChild(a);
  }
  addFeatureIcon(i2, o, a) {
    const t = { unknown: "map-marker", amenity: "map-marker", building: "map-marker", street: "road", suburb: "city", district: "city", postcode: "city", city: "city", county: "city", state: "city" }, n = e.find((e2) => a && e2.code.toLowerCase() === a.toLowerCase());
    if ("country" === o && n) {
      i2.classList.add("emoji");
      const e2 = document.createElement("span");
      e2.innerText = n.emoji, i2.appendChild(e2);
    } else
      this.addIcon(i2, t[o] ? t[o] : "map-marker");
  }
  notifyValueSelected(e2) {
    var _a;
    if (this.currentPlaceDetailsPromiseReject && (this.currentPlaceDetailsPromiseReject({ canceled: true }), this.currentPlaceDetailsPromiseReject = null), this.options.addDetails && e2 && !((_a = e2.properties.nonVerifiedParts) == null ? void 0 : _a.length)) {
      let i2;
      i2 = this.sendPlaceDetailsRequestAlt ? this.sendPlaceDetailsRequestAlt(e2, this) : this.sendPlaceDetailsRequest(e2), i2.then((e3) => {
        this.changeCallbacks.forEach((i3) => i3(e3)), this.currentPlaceDetailsPromiseReject = null;
      }, (i3) => {
        i3.canceled || (console.log(i3), this.changeCallbacks.forEach((i4) => i4(e2)), this.currentPlaceDetailsPromiseReject = null);
      });
    } else
      this.changeCallbacks.forEach((i2) => i2(e2));
  }
  notifySuggestions(e2) {
    this.suggestionsChangeCallbacks.forEach((i2) => i2(e2));
  }
  notifyOpened() {
    this.openCallbacks.forEach((e2) => e2(true));
  }
  notifyClosed() {
    this.closeCallbacks.forEach((e2) => e2(false));
  }
  openDropdownAgain() {
    const e2 = document.createEvent("Event");
    e2.initEvent("input", true, true), this.inputElement.dispatchEvent(e2);
  }
  generatePlacesUrlUrl(e2) {
    let i2 = `${this.placeDetailsUrl}?id=${e2}&apiKey=${this.apiKey}`;
    return this.options.lang && (i2 += `&lang=${this.options.lang}`), i2;
  }
  generateUrl(e2) {
    let i2 = `${this.geocoderUrl}?text=${encodeURIComponent(e2)}&apiKey=${this.apiKey}`;
    this.options.type && (i2 += `&type=${this.options.type}`), this.options.limit && (i2 += `&limit=${this.options.limit}`), this.options.lang && (i2 += `&lang=${this.options.lang}`);
    const o = [], a = this.options.filter[this.BY_COUNTRYCODE], t = this.options.filter[this.BY_CIRCLE], n = this.options.filter[this.BY_RECT], d = this.options.filter[this.BY_PLACE];
    a && a.length && o.push(`countrycode:${a.join(",").toLowerCase()}`), t && this.isLatitude(t.lat) && this.isLongitude(t.lon) && t.radiusMeters > 0 && o.push(`circle:${t.lon},${t.lat},${t.radiusMeters}`), n && this.isLatitude(n.lat1) && this.isLongitude(n.lon1) && this.isLatitude(n.lat2) && this.isLongitude(n.lon2) && o.push(`rect:${n.lon1},${n.lat1},${n.lon2},${n.lat2}`), d && o.push(`place:${d}`), i2 += o.length ? `&filter=${o.join("|")}` : "";
    const l = [], s = this.options.bias[this.BY_COUNTRYCODE], c = this.options.bias[this.BY_CIRCLE], r = this.options.bias[this.BY_RECT], F = this.options.bias[this.BY_PROXIMITY];
    return s && s.length && l.push(`countrycode:${s.join(",").toLowerCase()}`), c && this.isLatitude(c.lat) && this.isLongitude(c.lon) && c.radiusMeters > 0 && l.push(`circle:${c.lon},${c.lat},${c.radiusMeters}`), r && this.isLatitude(r.lat1) && this.isLongitude(r.lon1) && this.isLatitude(r.lat2) && this.isLongitude(r.lon2) && l.push(`rect:${r.lon1},${r.lat1},${r.lon2},${r.lat2}`), F && this.isLatitude(F.lat) && this.isLongitude(F.lon) && l.push(`proximity:${F.lon},${F.lat}`), i2 += l.length ? `&bias=${l.join("|")}` : "", i2;
  }
  isLatitude(e2) {
    return "" !== e2 && null !== e2 && isFinite(e2) && Math.abs(e2) <= 90;
  }
  isLongitude(e2) {
    return "" !== e2 && null !== e2 && isFinite(e2) && Math.abs(e2) <= 180;
  }
};
export {
  i as GeocoderAutocomplete
};
//# sourceMappingURL=@geoapify_geocoder-autocomplete.js.map
